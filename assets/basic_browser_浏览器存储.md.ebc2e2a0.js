import{_ as o,c as s,o as a,V as e}from"./chunks/framework.25f281e8.js";const D=JSON.parse('{"title":"浏览器存储","description":"","frontmatter":{},"headers":[],"relativePath":"basic/browser/浏览器存储.md","filePath":"basic/browser/浏览器存储.md"}'),l={name:"basic/browser/浏览器存储.md"},n=e(`<h1 id="浏览器存储" tabindex="-1">浏览器存储 <a class="header-anchor" href="#浏览器存储" aria-label="Permalink to &quot;浏览器存储&quot;">​</a></h1><h2 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;Cookie&quot;">​</a></h2><p>Cookie 是最早被提出来的本地存储方式，在此之前，服务端是无法判断网络中的两个请求是否是同一用户发起的，为解决这个问题，Cookie 就出现了。</p><p>Cookie 的大小只有 4kb，它是一种纯文本文件，每次发起 HTTP 请求都会携带 Cookie。</p><p>Cookie 的特性：</p><ul><li>Cookie 一旦创建成功，名称就无法修改</li><li>Cookie 是无法跨域名的，这也是由 Cookie 的隐私安全性决定的，这样就能够阻止非法获取其他网站的 Cookie</li><li>每个域名下 Cookie 的数量不能超过 20 个，每个 Cookie 的大小不能超过 4kb</li><li>有安全问题，如果 Cookie 被拦截了，那就可获得 session 的所有信息，即使加密也于事无补，无需知道 cookie 的意义，只要转发 cookie 就能达到目的</li><li>Cookie 在请求一个新的页面的时候都会被发送过去</li></ul><p>如果需要域名之间跨域共享 Cookie，有两种方法：</p><ol><li>使用 Nginx 反向代理</li><li>在一个站点登陆之后，往其他网站写 Cookie。服务端的 Session 存储到一个节点，Cookie 存储 sessionId</li></ol><p>Cookie 的使用场景：</p><ul><li>最常见的使用场景就是 Cookie 和 session 结合使用，我们将 sessionId 存储到 Cookie 中，每次发请求都会携带这个 sessionId，这样服务端就知道是谁发起的请求，从而响应相应的信息。</li><li>可以用来统计页面的点击次数</li></ul><h2 id="localstorage" tabindex="-1">localStorage <a class="header-anchor" href="#localstorage" aria-label="Permalink to &quot;localStorage&quot;">​</a></h2><p>LocalStorage 是 HTML5 新引入的特性</p><p>LocalStorage 的优点：</p><ul><li>在大小方面，LocalStorage 的大小一般为 5MB，可以储存更多的信息</li><li>LocalStorage 是持久储存，并不会随着页面的关闭而消失，除非主动清理，不然会永久存在</li><li>仅储存在本地，不像 Cookie 那样每次 HTTP 请求都会被携带</li></ul><p>LocalStorage 的缺点：</p><ul><li>存在浏览器兼容问题，IE8 以下版本的浏览器不支持</li><li>如果浏览器设置为隐私模式，那我们将无法读取到 LocalStorage</li><li>LocalStorage 受到同源策略的限制，即端口、协议、主机地址有任何一个不相同，都不会访问</li></ul><p>LocalStorage 的 API：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setItem</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getItem</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeItem</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">key</span><span style="color:#A6ACCD;">(index)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>LocalStorage 的使用场景：</p><ul><li>有些网站有换肤的功能，这时候就可以将换肤的信息存储在本地的 LocalStorage 中，当需要换肤的时候，直接操作 LocalStorage 即可</li><li>在网站中的用户浏览信息也会存储在 LocalStorage 中，还有网站的一些不常变动的个人信息等也可以存储在本地的 LocalStorage 中</li></ul><h2 id="sessionstorage" tabindex="-1">sessionStorage <a class="header-anchor" href="#sessionstorage" aria-label="Permalink to &quot;sessionStorage&quot;">​</a></h2><p>SessionStorage 是在 HTML5 才提出来的存储方案，SessionStorage 主要用于临时保存同一窗口(或标签页) 的数据，刷新页面时不会删除，关闭窗口或标签页之后将会删除这些数据。</p><p>SessionStorage 与 LocalStorage 对比：</p><ul><li>SessionStorage 和 LocalStorage 都在本地进行数据存储；</li><li>SessionStorage 也有同源策略的限制，但是 SessionStorage 有一条更加严格的限制，<strong>SessionStorage 只有在同一浏览器的同一窗口下才能够共享；</strong></li><li>LocalStorage 和 SessionStorage 都不能被爬虫爬取；</li></ul><p>SessionStorage 的常用 API：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 保存数据到 sessionStorage</span></span>
<span class="line"><span style="color:#A6ACCD;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setItem</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 从 sessionStorage 获取数据</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getItem</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 从 sessionStorage 删除保存的数据</span></span>
<span class="line"><span style="color:#A6ACCD;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeItem</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 从 sessionStorage 删除所有保存的数据</span></span>
<span class="line"><span style="color:#A6ACCD;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取某个索引的Key</span></span>
<span class="line"><span style="color:#A6ACCD;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">key</span><span style="color:#A6ACCD;">(index)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>SessionStorage 的使用场景</p><ul><li>由于 SessionStorage 具有时效性，所以可以用来存储一些网站的游客登录的信息，还有临时的浏览记录的信息。当关闭网站之后，这些信息也就随之消除了。</li></ul><h2 id="比较" tabindex="-1">比较 <a class="header-anchor" href="#比较" aria-label="Permalink to &quot;比较&quot;">​</a></h2><ul><li>cookie：其实最开始是服务器端用于记录用户状态的一种方式，由服务器设置，在客户端存储，然后每次发起同源请求时，发送给服务器端。cookie 最多能存储 4k 数据，它的生存时间由 expires 属性指定，并且 cookie 只能被同源的页面访问共享。</li><li>sessionStorage：html5 提供的一种浏览器本地存储的方法，它借鉴了服务器端 session 的概念，代表的是一次会话中所保存的数据。它一般能够存储 5M 或者更大的数据，它在当前窗口关闭后就失效了，并且 sessionStorage 只能被同一个窗口的同源页面所访问共享。</li><li>localStorage：html5 提供的一种浏览器本地存储的方法，它一般也能够存储 5M 或者更大的数据。它和 sessionStorage 不同的是，除非手动删除它，否则它不会失效，并且 localStorage 也只能被同源页面所访问共享。</li></ul><p>上面三种方式都是存储少量数据的时候的存储方式，当需要在本地存储大量数据的时候，我们可以使用浏览器的 IndexedDB，这是浏览器提供的一种本地的数据库存储机制。它不是关系型数据库，它内部采用对象仓库的形式存储数据，它更接近 NoSQL 数据库。</p><p>Web Storage 和 cookie 的区别总结如下：</p><ul><li>Web Storage 是为了更大容量存储设计的。Cookie 的大小是受限的，并且每次你请求一个新的页面的时候 Cookie 都会被发送过去，这样无形中浪费了带宽；</li><li>cookie 需要指定作用域，不可以跨域调用；</li><li>Web Storage 拥有 setItem,getItem,removeItem,clear 等方法，不像 cookie 需要前端开发者自己封装 setCookie，getCookie；</li><li>Cookie 也是不可以或缺的：Cookie 的作用是与服务器进行交互，作为 HTTP 规范的一部分而存在 ，而 Web Storage 仅仅是为了在本地“存储”数据而生。</li></ul><h3 id="_38-cookie、localstorage、sessionstorage" tabindex="-1">38.Cookie、localStorage、sessionStorage <a class="header-anchor" href="#_38-cookie、localstorage、sessionstorage" aria-label="Permalink to &quot;38.Cookie、localStorage、sessionStorage&quot;">​</a></h3><h4 id="_1-cookie" tabindex="-1">1.Cookie <a class="header-anchor" href="#_1-cookie" aria-label="Permalink to &quot;1.Cookie&quot;">​</a></h4><p>在此之前，服务端是无法判断网络中的两个请求是否是同一用户发起的，为解决这个问题，Cookie 就出现了。Cookie 的大小只有 4kb，它是一种纯文本文件，每次发起 HTTP 请求都会携带 Cookie。</p><p>Cookie 的特性：</p><ul><li><p>Cookie 一旦创建成功，名称就无法修改</p></li><li><p>Cookie 是无法跨域名的，也就是说 a 域名和 b 域名下的 cookie 是无法共享的，这也是由 Cookie 的隐私安全性决定的，这样就能够阻止非法获取其他网站的</p><p>Cookie</p></li><li><p>每个域名下 Cookie 的数量不能超过 20 个，每个 Cookie 的大小不能超过 4kb</p></li><li><p>有安全问题，如果 Cookie 被拦截了，那就可获得 session 的所有信息，即使加密也于事无补，无需知道 cookie 的意义，只要转发</p><p>cookie 就能达到目的</p></li><li><p>Cookie 在请求一个新的页面的时候都会被发送过去</p></li></ul><h4 id="_2-localstorage" tabindex="-1">2.LocalStorage <a class="header-anchor" href="#_2-localstorage" aria-label="Permalink to &quot;2.LocalStorage&quot;">​</a></h4><p>HTML5 新引入的特性，由于有的时候我们存储的信息较大，Cookie 就不能满足我们的需求，这时候 LocalStorage 就派上用场了。</p><p>LocalStorage 的优点：</p><ul><li>在大小方面，LocalStorage 的大小一般为 5MB，可以储存更多的信息</li><li>LocalStorage 是持久储存，并不会随着页面的关闭而消失，除非主动清理，不然会永久存在</li><li>仅储存在本地，不像 Cookie 那样每次 HTTP 请求都会被携带</li></ul><p>LocalStorage 的缺点：</p><ul><li>存在浏览器兼容问题，IE8 以下版本的浏览器不支持</li><li>如果浏览器设置为隐私模式，那我们将无法读取到 LocalStorage</li><li>LocalStorage 受到同源策略的限制，即端口、协议、主机地址有任何一个不相同，都不会访问</li></ul><h4 id="_3-sessionstorage" tabindex="-1">（3）SessionStorage <a class="header-anchor" href="#_3-sessionstorage" aria-label="Permalink to &quot;（3）SessionStorage&quot;">​</a></h4><p>SessionStorage 和 LocalStorage 都是在 HTML5 才提出来的存储方案，SessionStorage 主要用于临时保存同一窗口(或标签页) 的数据，刷新页面时不会删除，关闭窗口或标签页之后将会删除这些数据。</p><p>SessionStorage 与 LocalStorage 对比</p><ul><li><p>SessionStorage 和 LocalStorage 都在本地进行数据存储；</p></li><li><p>SessionStorage 也有同源策略的限制，但是 SessionStorage 有一条更加严格的限制，SessionStorage**</p><p>只有在同一浏览器的同一窗口下才能够共享**；</p></li><li><p>LocalStorage 和 SessionStorage 都不能被爬虫爬取；</p></li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>浏览器端常用的存储技术是 cookie 、localStorage 和 sessionStorage。</p><ul><li><p>cookie：其实最开始是服务器端用于记录用户状态的一种方式，由服务器设置，在客户端存储，然后每次发起同源请求时，发送给服务器端。cookie</p><p>最多能存储 4 k 数据，它的生存时间由 expires 属性指定，并且 cookie 只能被同源的页面访问共享。</p></li><li><p>sessionStorage：html5 提供的一种浏览器本地存储的方法，它借鉴了服务器端 session 的概念，代表的是一次会话中所保存的数据。它一般能够存储</p><p>5M 或者更大的数据，它在当前窗口关闭后就失效了，并且 sessionStorage 只能被同一个窗口的同源页面所访问共享。</p></li><li><p>localStorage：html5 提供的一种浏览器本地存储的方法，它一般也能够存储 5M 或者更大的数据。它和 sessionStorage</p><p>不同的是，除非手动删除它，否则它不会失效，并且 localStorage 也只能被同源页面所访问共享。</p></li><li><p>不同浏览器无法共享 localStorage 和 sessionStorage 的值。</p><p>**相同浏览器下，并且是同源窗口（协议、域名、端口一致），不同页面可以共享 localStorage，Cookies 值，通过跳转的页面可以共享</p><p>sessionStorage 值。关于 sessionStorage，通常说 sessionStorage 关闭页面即消失，但是通过跳转的页面可以共享 sessionStorage 值，跳转有多种方式：</p></li></ul><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">(1)  &lt;a href=&quot;同源页面&quot; target=&quot;_self&quot;跳转&lt;/a&gt;    //原窗口</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  (2) &lt;a href=&quot;同源页面&quot; target=&quot;_blank&quot;跳转&lt;/a&gt;  //新开窗口</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  (3) window.location.href = &#39;同源页面&#39;      //原窗口</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  (4) window.location.replace(&#39;同源页面&#39;)   //原窗口</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  (5) window.open(&#39;同源页面&#39;)       //新开窗口</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  (6) this.$router.push({path: &#39;同源页面&#39;})   //通过路由跳转共享值</span></span></code></pre></div><h3 id="cookie-1" tabindex="-1">Cookie <a class="header-anchor" href="#cookie-1" aria-label="Permalink to &quot;Cookie&quot;">​</a></h3><p>Cookie 由以下字段组成：</p><ul><li><p>Name：cookie 的名称</p></li><li><p>Value：cookie 的值，对于认证 cookie，value 值包括 web 服务器所提供的访问令牌；</p></li><li><p>Size： cookie 的大小</p></li><li><p>Path：可以访问此 cookie 的页面路径。 比如 domain 是 abc.com，path 是<code>/test</code>，那么只有<code>/test</code>路径下的页面可以读取此</p><p>cookie。</p></li><li><p>Secure： 指定是否使用 HTTPS 安全协议发送 Cookie。使用 HTTPS 安全协议，可以保护 Cookie 在浏览器和 Web</p><p>服务器间的传输过程中不被窃取和篡改。该方法也可用于 Web 站点的身份鉴别，即在 HTTPS 的连接建立阶段，浏览器会检查 Web 网站的 SSL 证书的有效性。但是基于兼容性的原因（比如有些网站使用自签署的证书）在检测到 SSL 证书无效时，浏览器并不会立即终止用户的连接请求，而是显示安全风险信息，用户仍可以选择继续访问该站点。</p></li><li><p>Domain：可以访问该 cookie 的域名，Cookie 机制并未遵循严格的同源策略，允许一个子域可以设置或获取其父域的</p><p>Cookie。当需要实现单点登录方案时，Cookie 的上述特性非常有用，然而也增加了 Cookie 受攻击的危险，比如攻击者可以借此发动会话定置攻击。因而，浏览器禁止在 Domain 属性中设置.org、.com 等通用顶级域名、以及在国家及地区顶级域下注册的二级域名，以减小攻击发生的范围。</p></li><li><p>HTTP： 该字段包含<code>HTTPOnly</code> 属性 ，该属性用来设置 cookie 能否通过脚本来访问，默认为空，即可以通过脚本访问。在客户端是不能通过</p><p>js 代码去设置一个 httpOnly 类型的 cookie 的，这种类型的 cookie 只能通过服务端来设置。该属性用于防止客户端脚本通过<code>document.cookie</code>属性访问 Cookie，有助于保护 Cookie 不被跨站脚本攻击窃取或篡改。但是，HTTPOnly 的应用仍存在局限性，一些浏览器可以阻止客户端脚本对 Cookie 的读操作，但允许写操作；此外大多数浏览器仍允许通过 XMLHTTP 对象读取 HTTP 响应中的 Set-Cookie 头。</p></li><li><p>Expires/Max-size ： 此 cookie 的超时时间。若设置其值为一个时间，那么当到达此时间后，此 cookie 失效。不设置的话默认值是</p><p>Session，意思是 cookie 会和 session 一起失效。当浏览器关闭(不是浏览器标签页，而是整个浏览器) 后，此 cookie 失效。</p></li></ul><p>总结：</p><p>服务器端可以使用 Set-Cookie 的响应头部来配置 cookie 信息。一条 cookie 包括了 5 个属性值 expires、domain、path、secure、HttpOnly。其中 expires 指定了 cookie 失效的时间，domain 是域名、path 是路径，domain 和 path 一起限制了 cookie 能够被哪些 url 访问。secure 规定了 cookie 只能在确保安全的情况下传输，HttpOnly 规定了这个 cookie 只能被服务器访问，不能使用 js 脚本访问。</p>`,57),p=[n];function i(t,r,c,C,k,S){return a(),s("div",null,p)}const y=o(l,[["render",i]]);export{D as __pageData,y as default};
