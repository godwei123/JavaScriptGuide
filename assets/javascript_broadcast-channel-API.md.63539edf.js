import{d as m,h as t,C as p,o as i,c as E,H as n,w as c,a as r,t as F,Q as B,k as l}from"./chunks/framework.00751356.js";const v={class:"components-container"},g=m({__name:"broadcast-channel-visual",setup(h){const a=t(""),s=t([]);t([]);const o=new BroadcastChannel("test_channel");o.onmessage=function(e){s.value=JSON.parse(e.data)},o.onmessageerror=function(e){console.log(e)},o.postMessage(JSON.stringify(s.value));const d=()=>{a.value&&(s.value.push(a.value),o.postMessage(JSON.stringify(s.value)))};return(e,y)=>{const u=p("n-text"),_=p("n-input"),C=p("n-button"),A=p("n-input-group");return i(),E("div",v,[n(u,null,{default:c(()=>[r(F(s.value),1)]),_:1}),n(A,null,{default:c(()=>[n(_,{value:a.value,"onUpdate:value":y[0]||(y[0]=b=>a.value=b),placeholder:"请输入"},null,8,["value"]),n(C,{ghost:"",type:"primary",onClick:d},{default:c(()=>[r(" 发送")]),_:1})]),_:1})])}}}),P=B(`<h1 id="broadcast-channel-api" tabindex="-1">Broadcast Channel API <a class="header-anchor" href="#broadcast-channel-api" aria-label="Permalink to &quot;Broadcast Channel API&quot;">​</a></h1><p>当我们网页需要在不同的浏览器窗口之间共享数据时，可能需要使用 WebSocket 或 WebRTC 等技术。但是，这些技术会过于复杂，而浏览器自带的 Broadcast Channel API 可以让我们轻松地在不同浏览器窗口之间共享数据，而无需使用复杂的技术。</p><p>Broadcast Channel API 可以实现同源下浏览器不同窗口，Tab 页，frame 或者 iframe 下的浏览器上下文(通常是同一个网站下不同的页面) 之间的简单通讯。 并且此特性在 Web Worker 中可用</p><h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h2><p>使用 Broadcast Channel API 的基本方法非常简单。我们只需要创建一个 BroadcastChannel 实例，并使用 postMessage() 方法向该频道发送消息。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 连接到广播频道</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BroadcastChannel</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test_channel&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 发送消息，消息内容可以是任意类型的数据。</span></span>
<span class="line"><span style="color:#E1E4E8;">bc.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello world!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 监听名为 &quot;test_channel&quot; 的广播频道</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myChannel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BroadcastChannel</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test_channel&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 监听该频道并处理消息</span></span>
<span class="line"><span style="color:#E1E4E8;">myChannel.</span><span style="color:#B392F0;">onmessage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(event.data);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当频道收到一条无法反序列化的消息时触发。</span></span>
<span class="line"><span style="color:#E1E4E8;">myChannel.</span><span style="color:#B392F0;">onmessageerror</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(error);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 关闭频道对象，告诉它不要再接收新的消息，并允许它最终被垃圾回收。</span></span>
<span class="line"><span style="color:#E1E4E8;">myChannel.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 连接到广播频道</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BroadcastChannel</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test_channel&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 发送消息，消息内容可以是任意类型的数据。</span></span>
<span class="line"><span style="color:#24292E;">bc.</span><span style="color:#6F42C1;">postMessage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello world!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 监听名为 &quot;test_channel&quot; 的广播频道</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myChannel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BroadcastChannel</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test_channel&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 监听该频道并处理消息</span></span>
<span class="line"><span style="color:#24292E;">myChannel.</span><span style="color:#6F42C1;">onmessage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(event.data);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当频道收到一条无法反序列化的消息时触发。</span></span>
<span class="line"><span style="color:#24292E;">myChannel.</span><span style="color:#6F42C1;">onmessageerror</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(error);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 关闭频道对象，告诉它不要再接收新的消息，并允许它最终被垃圾回收。</span></span>
<span class="line"><span style="color:#24292E;">myChannel.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="broadcast-channel-api-优缺点" tabindex="-1">Broadcast Channel API 优缺点 <a class="header-anchor" href="#broadcast-channel-api-优缺点" aria-label="Permalink to &quot;Broadcast Channel API 优缺点&quot;">​</a></h2><p>其优点有以下几个：</p><ul><li>传递数据：提供了一种可靠的方法，使独立的 JavaScript 应用程序在同一浏览器同一站点内传递数据。</li><li>传输速度快：以高速连接，提供更快的数据传输速度。</li><li>实时性：提供了实时，低延迟的数据传输。</li><li>可靠性：能够在小的数据包丢失或意外丢失时进行恢复。</li></ul><p>不过，Broadcast Channel API 也存在以下缺点：</p><ul><li>仅限同源：Broadcast Channel API 只能在同一浏览器同一站点内进行通信。这意味着，虽然不同的站点可以在同一浏览器内打开，但无法使用 Broadcast Channel API 进行通信。</li><li>受浏览器支持限制：与大多数 Web API 一样，Broadcast Channel API 受到不同浏览器和平台的支持和兼容性限制。</li><li>需要共性的 API 使用：不同的 JavaScript 应用程序需要知道如何使用 Broadcast Channel API 来共享数据。如果开发人员没有必要的知识，那么 API 就可能不如预期地使用。</li></ul><h2 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h2><blockquote><p>打开多个 tab 页，输入内容并发送，多个 tab 页内容将同步</p></blockquote>`,13),f=l("h2",{id:"附录",tabindex:"-1"},[r("附录 "),l("a",{class:"header-anchor",href:"#附录","aria-label":'Permalink to "附录"'},"​")],-1),q=l("ul",null,[l("li",null,"broadcast-channel ，该项目是一个简单易用的 Broadcast Channel API 封装。"),l("li",null,"react-broadcast-channel ，该项目是一个 React 应用程序的 Broadcast Channel API 封装。")],-1),k=JSON.parse('{"title":"Broadcast Channel API","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/broadcast-channel-API.md","filePath":"javascript/broadcast-channel-API.md"}'),D={name:"javascript/broadcast-channel-API.md"},x=Object.assign(D,{setup(h){return(a,s)=>(i(),E("div",null,[P,n(g),f,q]))}});export{k as __pageData,x as default};
