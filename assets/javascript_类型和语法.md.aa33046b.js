import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.00751356.js";const p="/javascript-guide/assets/5s5e7w6dfwq77qwf.bb5f73a2.png",h=JSON.parse('{"title":"类型和语法","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/类型和语法.md","filePath":"javascript/类型和语法.md"}'),o={name:"javascript/类型和语法.md"},e=l(`<h1 id="类型和语法" tabindex="-1">类型和语法 <a class="header-anchor" href="#类型和语法" aria-label="Permalink to &quot;类型和语法&quot;">​</a></h1><p>《你不知道的 Javascript》</p><p>typeof null =〉“object”</p><p>typeof function(){} =&gt; “function” 函数是 object 的一个子类型</p><p>函数对象的 length 属性是其声明的参数的个数.</p><p>typeof 运算符总是会返回一个字符串</p><p>变量未持有值时为 undefined ，此时 typeof 返回 undefined</p><p>注意：”undefined“ 和 “is not defined” 是两回事。</p><p>对于 undeclared（或者 not defined）变量，typeof 照样返回&quot;undefined&quot;。请注意虽然是一个 undeclared 变量，但 typeof b 并没有报错。这是因为 typeof 有一个特殊的安全防范机制。</p><p>如何在程序中检查全局变量 DEBUG 才不会出现 ReferenceError 错误。这时 typeof 的安全防范机制就成了我们的好帮手。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">DEBUG</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 会抛出错误</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;===&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DEBUG</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;undefined&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;===&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">DEBUG</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 会抛出错误</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;===&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DEBUG</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;undefined&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;===&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在我们试图访问&quot;undeclared&quot;变量时这样报错：ReferenceError: a is not defined，并且 typeof 对 undefined 和 undeclared 变量都返回&quot;undefined&quot;。</p><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><p>使用 delete 运算符可以将单元从数组中删除，但是请注意，单元删除后，数组的 length 属性并不会发生变化。删除的位置变为 &lt;1 empty item&gt;</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> nums </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">nums[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">nums[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(nums[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]); </span><span style="color:#6A737D;">//undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> nums </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">nums[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">nums[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(nums[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">//undefined</span></span></code></pre></div><p>其中的“空白单元”（empty slot）可能会导致出人意料的结果。a[1]的值为 undefined，但这与将其显式赋值为 undefined（a[1] =undefined）还是有所区别。</p><p>如果字符串键值能够被强制类型转换为十进制数字的话，它就会被当作数字索引来处理。a[“13”]=2; a.length =&gt; 14</p><p>类数组 =&gt; 数组</p><p>Array.from(arguments)</p><p>Array.prototype.slice.call(arguments)</p><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h2><p>JavaScript 中字符串是不可变的，而数组是可变的。</p><p>字符串不可变是指字符串的成员函数不会改变其原始值，而是创建并返回一个新的字符串。</p><p>数组有一个字符串没有的可变更成员函数 reverse()</p><h2 id="数字" tabindex="-1">数字 <a class="header-anchor" href="#数字" aria-label="Permalink to &quot;数字&quot;">​</a></h2><p>tofixed(..)方法可指定小数部分的显示位数</p><p>toPrecision(..)方法用来指定有效数位的显示位数</p><p>注意：“.” 运算符需要给予特别注意，因为它是一个有效的数字字符，会被优先识别为数字字面量的一部分，然后才是对象属性访问运算符。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// SyntaxError</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">42</span></span>
<span class="line"><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// √</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.42</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// √</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// √</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// √ 注意空格</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">42</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// SyntaxError</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">42</span></span>
<span class="line"><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// √</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.42</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// √</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// √</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// √ 注意空格</span></span></code></pre></div><p>0.1+0.2===0.3 最常见的方法是设置一个误差范围值，通常称为“机器精度”（machineepsilon），对 JavaScript 的数字来说，这个值通常是 2^-52(2.220446049250313e-16)。从 ES6 开始，该值定义在 Number.EPSILON 中。</p><p>能够呈现的最大浮点数大约是 1.798e+308（这是一个相当大的数字），它定义在 Number.MAX_VALUE 中。最小浮点数定义在 Number.MIN_VALUE 中，大约是 5e-324，它不是负数，但无限接近于 0！</p><p>能够被“安全”呈现的最大整数是 2^53-1，即 9007199254740991，在 ES6 中被定义为 Number.MAX_SAFE_INTEGER。最小整数是-9007199254740991，在 ES6 中被定义为 Number.MIN_SAFE_INTEGER。</p><p>要检测一个值是否是整数，可以使用 ES6 中的 Number.isInteger(..)方法</p><p>要检测一个值是否是安全的整数，可以使用 ES6 中的 Number.isSafeInteger(..)方法</p><h2 id="null-undefined" tabindex="-1">Null &amp; Undefined <a class="header-anchor" href="#null-undefined" aria-label="Permalink to &quot;Null &amp; Undefined&quot;">​</a></h2><p>undefined 类型只有一个值，即 undefined。null 类型也只有一个值，即 null。</p><p>它们的名称既是类型也是值。undefined 和 null 常被用来表示“空的”值或“不是值”的值。二者之间有一些细微的差别。</p><p>例如：</p><p>• null 指空值（empty value）</p><p>• undefined 指没有值（missing value）</p><p>或者：</p><p>• undefined 指从未赋值</p><p>• null 指曾赋过值，但是目前没有值</p><p>null 是一个特殊关键字，不是标识符，我们不能将其当作变量来使用和赋值。</p><p>然而 undefined 却是一个标识符，可以被当作变量来使用和赋值。</p><p>var a = 2/“foo” // NaN</p><p>typeof a =&gt; “number”</p><p>NaN 非自反 NaN !== NaN =&gt; true</p><p>全局工具函数 isNaN(...) 判断一个值是否是 NaN. (不建议使用)</p><p>isNaN(a) //true</p><p>isNaN(“foo”) //true</p><p>从 ES6 开始我们可以使用工具函数 Number.isNaN(..)。</p><p>Number.isNaN(a) //true</p><p>Number.isNaN(“foo”) //false</p><p><strong>很多 JavaScript 程序都可能存在 NaN 方面的问题，所以我们应该尽量使用 Number.isNaN(..)这样可靠的方法</strong></p><p>var a = 1 / 0 // Infinity Number.POSITIVE_INfINITY</p><p>var a = -1 / 0 // -Infinity Number.NEGATIVE_INfINITY</p><p>Infinity/Infinity 是一个未定义操作，结果为 NaN。</p><p>有穷正数除以 Infinity 呢？结果是 0。</p><p>有穷负数除以 Infinity 呢？结果是-0。</p><p>负零在开发调试控制台中通常显示为-0，但在一些老版本的浏览器中仍然会显示为 0。</p><p>根据规范，对负零进行字符串化会返回&quot;0”</p><p>JSON.stringify(“-0”) =&gt; “0”</p><p>有意思的是，如果反过来将其从字符串转换为数字，得到的结果是准确的.</p><p>+“-0” =&gt; -0</p><p>Number(“-0”) =&gt; -0</p><p>JSON.parse(“-0”) =&gt; -0</p><p>0 === -0 // true</p><p>Object.is(0,-0) // false</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">v1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">v2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (v1 </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> v2 </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// -0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> v1 </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> v2;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (v1 </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> v1) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> v2 </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> v2;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> v1 </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> v2;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">is</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">v1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">v2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (v1 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> v2 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// -0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> v1 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> v2;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (v1 </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> v1) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> v2 </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> v2;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> v1 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> v2;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>能使用==和===时就尽量不要使用 Object.is(..)，因为前者效率更高、更为通用。Object.is(..)主要用来处理那些特殊的相等比较。</p><h2 id="原生函数" tabindex="-1">原生函数 <a class="header-anchor" href="#原生函数" aria-label="Permalink to &quot;原生函数&quot;">​</a></h2><p>String()</p><p>Number()</p><p>Boolean()</p><p>Array()</p><p>Object()</p><p>Function()</p><p>RegExp()</p><p>Date()</p><p>Error()</p><p>Symbol()</p><p>原生函数可以被当作构造函数来使用.</p><h2 id="强制类型转换" tabindex="-1">强制类型转换 <a class="header-anchor" href="#强制类型转换" aria-label="Permalink to &quot;强制类型转换&quot;">​</a></h2><p>将值从一种类型转换为另一种类型通常称为类型转换（type casting），这是显式的情况；隐式的情况称为强制类型转换（coercion）。</p><p>类型转换发生在静态类型语言的编译阶段，而强制类型转换则发生在动态类型语言的运行时（runtime）。</p><h3 id="tostring" tabindex="-1">ToString <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;ToString&quot;">​</a></h3><p>基本类型值的字符串化规则为：null 转换为&quot;null&quot;, undefined 转换为&quot;undefined&quot;,true 转换为&quot;true&quot;。</p><p>数字的字符串化则遵循通用规则，不过那些极小和极大的数字使用指数形式。</p><p>对普通对象来说，除非自行定义，否则 toString()（Object.prototype.toString()）返回内部属性[[Class]]的值，如&quot;[object Object]&quot;。</p><p>数组的默认 toString()方法经过了重新定义，将所有单元字符串化以后再用&quot;, &quot;连接起来。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> nums </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(nums.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// &quot;1,2,3,4&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> nums </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(nums.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// &quot;1,2,3,4&quot;</span></span></code></pre></div><p>工具函数 JSON.stringify(..)在将 JSON 对象序列化为字符串时也用到了 ToString。请注意，JSON 字符串化并非严格意义上的强制类型转换，因为其中也涉及 ToString 的相关规则。</p><p>所有安全的 JSON 值（JSON-safe）都可以使用 JSON.stringify(..)字符串化。</p><p>安全的 JSON 值是指能够呈现为有效 JSON 格式的值。为了简单起见，我们来看看什么是不安全的 JSON 值。undefined、function、symbol（ES6+）和包含循环引用（对象之间相互引用，形成一个无限循环）的对象都不符合 JSON 结构标准，其他支持 JSON 的语言无法处理它们。</p><p>JSON.stringify(..)在对象中遇到 undefined、function 和 symbol 时会自动将其忽略，在数组中则会返回 null（以保证单元位置不变）。</p><p>对包含循环引用的对象执行 JSON.stringify(..)会出错。</p><p>toJSON()应该“返回一个能够被字符串化的安全的 JSON 值”，而不是“返回一个 JSON 字符串”。</p><p>我们可以向 JSON.stringify(..)传递一个可选参数 replacer，它可以是数组或者函数，用来指定对象序列化过程中哪些属性应该被处理，哪些应该被排除，和 toJSON()很像。</p><p>如果 replacer 是一个函数，它会对对象本身调用一次，然后对对象中的每个属性各调用一次，每次传递两个参数，键和值。如果要忽略某个键就返回 undefined，否则返回指定的值。</p><p>JSON.stringify 还有一个可选参数 space，用来指定输出的缩进格式。space 为正整数时是指定每一级缩进的字符数，它还可以是字符串，此时最前面的十个字符被用于每一级的缩进。</p><p>请记住，JSON.stringify(..)并不是强制类型转换。在这里介绍是因为它涉及 ToString 强制类型转换，具体表现在以下两点。</p><p>(1) 字符串、数字、布尔值和 null 的 JSON.stringify(..)规则与 ToString 基本相同。</p><p>(2) 如果传递给 JSON.stringify(..)的对象中定义了 toJSON()方法，那么该方法会在字符串化前调用，以便将对象转换为安全的 JSON 值。</p><p>[] ===&gt; “”</p><p>{} ===&gt; “[onject Object]”</p><h3 id="tonumber" tabindex="-1">ToNumber <a class="header-anchor" href="#tonumber" aria-label="Permalink to &quot;ToNumber&quot;">​</a></h3><p>其中 true 转换为 1, false 转换为 0。undefined 转换为 NaN, null 转换为 0。</p><p>ToNumber 对字符串的处理基本遵循数字常量的相关规则/语法。处理失败时返回 NaN（处理数字常量失败时会产生语法错误）。</p><p>不同之处是 ToNumber 对以 0 开头的十六进制数并不按十六进制处理（而是按十进制）。</p><p>对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。</p><p>为了将值转换为相应的基本类型值，抽象操作 ToPrimitive，会首先（通过内部操作 DefaultValue）检查该值是否有 valueOf() 方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString()的返回值（如果存在）来进行强制类型转换。如果 valueOf()和 toString()均不返回基本类型值，会产生 TypeError 错误。</p><p>从 ES5 开始，使用 Object.create(null)创建的对象[[Prototype]]属性为 null，并且没有 valueOf()和 toString()方法，因此无法进行强制类型转换。</p><p>Number([]) // 0</p><p>Number([“abc”]) // NaN</p><h3 id="toboolean" tabindex="-1">ToBoolean <a class="header-anchor" href="#toboolean" aria-label="Permalink to &quot;ToBoolean&quot;">​</a></h3><p>undefined</p><p>null</p><p>false</p><p>+0、-0</p><p>NaN</p><p>&quot;&quot;</p><p>|运算符（字位操作“或”）的空操作（no-op）0 | x，它仅执行 ToInt32 转换</p><p>~首先将值强制类型转换为 32 位数字，然后执行字位操作“非”（对每一个字位进行反转）</p><p>在-(x+1)中唯一能够得到 0（或者严格说是-0）的 x 值是-1。也就是说如果 x 为-1 时，~和一些数字值在一起会返回假值 0，其他情况则返回真值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">a.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;lo&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//找到了</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">~</span><span style="color:#24292E;">a.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;lo&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//找到了</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>~~x 能将值截除为一个 32 位整数，x | 0 也可以，而且看起来还更简洁。</p><p>从 ES5 开始 parseInt(..)默认转换为十进制数，除非另外指定。如果你的代码需要在 ES5 之前的环境运行，请记得将第二个参数设置为 10。</p><p>console.log(parseInt(&quot;0x12&quot;)) // 18</p><p><code>parseInt(1/0,19)</code> =&gt; 18</p><ul><li>parseInt(..)先将参数强制类型转换为字符串再进行解析，这样做没有任何问题。因为传递错误的参数而得到错误的结果，并不能归咎于函数本身。</li><li>parseInt(1/0, 19)实际上是 parseInt(&quot;Infinity&quot;, 19)</li><li>19 有效数字为 0-9，a-i</li><li>“Infinity” 有效字符为“i”，第二个字符不是有效字符，解析停止</li><li>最终结果为 18</li></ul><p>建议使用 Boolean(..)和！！来进行显式转换以便让代码更清晰易读。</p><h3 id="toprimitive" tabindex="-1">ToPrimitive <a class="header-anchor" href="#toprimitive" aria-label="Permalink to &quot;ToPrimitive&quot;">​</a></h3><p>[] + {}和{} + []，它们返回不同的结果，分别是&quot;[object Object]&quot;和 0。</p><p>相对布尔值，数字和字符串操作中的隐式强制类型转换还算比较明显。</p><p>下面的情况会发生布尔值隐式强制类型转换。</p><p>(1) if (..)语句中的条件判断表达式。</p><p>(2) for ( .. ; .. ; .. )语句中的条件判断表达式（第二个）。</p><p>(3) while (..)和 do..while(..)循环中的条件判断表达式。</p><p>(4) ? ：中的条件判断表达式。</p><p>(5) 逻辑运算符||（逻辑或）和&amp;&amp;（逻辑与）左边的操作数（作为条件判断表达式）。</p><p>以上情况中，非布尔值会被隐式强制类型转换为布尔值，遵循前面介绍过的 ToBoolean 抽象操作规则。</p><p>&amp;&amp;和||运算符的返回值并不一定是布尔类型，而是两个操作数其中一个的值。</p><p>ES6 允许从 symbol 到字符串的显式强制类型转换，然而隐式强制类型转换会产生错误。</p><p>symbol 不能够被强制类型转换为数字（显式和隐式都会产生错误），但可以被强制类型转换为布尔值（显式和隐式结果都是 true）。</p><p>“==允许在相等比较中进行强制类型转换，而===不允许。”</p><h3 id="x-y" tabindex="-1">x == y <a class="header-anchor" href="#x-y" aria-label="Permalink to &quot;x == y&quot;">​</a></h3><h4 id="_1、字符串和数字" tabindex="-1">1、字符串和数字 <a class="header-anchor" href="#_1、字符串和数字" aria-label="Permalink to &quot;1、字符串和数字&quot;">​</a></h4><p>(1) 如果 Type(x)是数字，Type(y)是字符串，则返回 x == ToNumber(y)的结果。</p><p>(2) 如果 Type(x)是字符串，Type(y)是数字，则返回 ToNumber(x) == y 的结果。</p><h4 id="_2、其他类型和布尔类型之间的相等比较" tabindex="-1">2、其他类型和布尔类型之间的相等比较 <a class="header-anchor" href="#_2、其他类型和布尔类型之间的相等比较" aria-label="Permalink to &quot;2、其他类型和布尔类型之间的相等比较&quot;">​</a></h4><p>(1) 如果 Type(x)是布尔类型，则返回 ToNumber(x) == y 的结果；</p><p>(2) 如果 Type(y)是布尔类型，则返回 x == ToNumber(y)的结果。</p><h4 id="_3、null-和-undefined" tabindex="-1">3、null 和 undefined <a class="header-anchor" href="#_3、null-和-undefined" aria-label="Permalink to &quot;3、null 和 undefined&quot;">​</a></h4><p>(1) 如果 x 为 null, y 为 undefined，则结果为 true。</p><p>(2) 如果 x 为 undefined, y 为 null，则结果为 true。</p><p>(3) null == null , undefined == undefined , null == undefined， 其余为 false</p><h4 id="_4-对象和非对象之间的相等比较" tabindex="-1">4．对象和非对象之间的相等比较 <a class="header-anchor" href="#_4-对象和非对象之间的相等比较" aria-label="Permalink to &quot;4．对象和非对象之间的相等比较&quot;">​</a></h4><p>(1) 如果 Type(x)是字符串或数字，Type(y)是对象，则返回 x == ToPrimitive(y)的结果；</p><p>(2) 如果 Type(x)是对象，Type(y)是字符串或数字，则返回 ToPrimitive(x) == y 的结果。</p><p>因为没有对应的封装对象，所以 null 和 undefined 不能够被封装（boxed）,Object(null)和 Object()均返回一个常规对象。</p><p>NaN 能够被封装为数字封装对象，但拆封之后 NaN == NaN 返回 false，因为 NaN 不等于 NaN。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">(a);</span></span>
<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> b; </span><span style="color:#6A737D;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">(a);</span></span>
<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> b; </span><span style="color:#6A737D;">//false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">(a);</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> b; </span><span style="color:#6A737D;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">(a);</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> b; </span><span style="color:#6A737D;">//false</span></span></code></pre></div><h4 id="_5、部分特殊比较结果" tabindex="-1">5、部分特殊比较结果 <a class="header-anchor" href="#_5、部分特殊比较结果" aria-label="Permalink to &quot;5、部分特殊比较结果&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> []); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> {}); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> []); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> {}); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> []); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> {}); </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> []); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> {}); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> []); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> {}); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> []); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> {}); </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h4 id="_6、极端情况" tabindex="-1">6、极端情况 <a class="header-anchor" href="#_6、极端情况" aria-label="Permalink to &quot;6、极端情况&quot;">​</a></h4><p><strong>[] == ![] =&gt; true</strong></p><ul><li>进行布尔值的显式强制类型转换 ![] 转换为 false, [] == false. ==&gt; true</li></ul><p>true == [] ==&gt; false</p><p>true == ![] ==&gt; true == false ==&gt; false</p><p><strong>2 == [2] =&gt; true</strong></p><p><strong>“” == [null] =&gt; true</strong></p><ul><li>==右边的值[2]和[null]会进行 ToPrimitive 强制类型转换，以便能够和左边的基本类型值（2 和&quot;&quot;）进行比较。</li><li>因为数组的 valueOf()返回数组本身，所以强制类型转换过程中数组会进行字符串化。</li><li>第一行中的[2]会转换为&quot;2&quot;，然后通过 ToNumber 转换为 2。第二行中的[null]会直接转换为&quot;&quot;。</li><li>[null].toString() ===&gt; “”</li></ul><p><strong>0 == “\\n”</strong></p><ul><li>&quot;&quot;、&quot;\\n&quot;（或者&quot; &quot;等其他空格组合）等空字符串被 ToNumber 强制类型转换为 0。</li></ul><h4 id="_7、小结" tabindex="-1">7、小结 <a class="header-anchor" href="#_7、小结" aria-label="Permalink to &quot;7、小结&quot;">​</a></h4><h5 id="_0-false-true" tabindex="-1">“0” == false ==&gt; true <a class="header-anchor" href="#_0-false-true" aria-label="Permalink to &quot;“0” == false ==&gt; true&quot;">​</a></h5><h5 id="false-0-true" tabindex="-1">false == 0 ==&gt; true <a class="header-anchor" href="#false-0-true" aria-label="Permalink to &quot;false == 0 ==&gt; true&quot;">​</a></h5><h5 id="false-true" tabindex="-1">false == “” ==&gt; true <a class="header-anchor" href="#false-true" aria-label="Permalink to &quot;false == “” ==&gt; true&quot;">​</a></h5><h5 id="false-true-1" tabindex="-1">false == [] ==&gt; true <a class="header-anchor" href="#false-true-1" aria-label="Permalink to &quot;false == [] ==&gt; true&quot;">​</a></h5><h5 id="_0-true" tabindex="-1">“” == 0 ==&gt; true <a class="header-anchor" href="#_0-true" aria-label="Permalink to &quot;“” == 0 ==&gt; true&quot;">​</a></h5><h5 id="true" tabindex="-1">“” == [] ==&gt; true <a class="header-anchor" href="#true" aria-label="Permalink to &quot;“” == [] ==&gt; true&quot;">​</a></h5><h5 id="_0-true-1" tabindex="-1">0 == [] ==&gt; true <a class="header-anchor" href="#_0-true-1" aria-label="Permalink to &quot;0 == [] ==&gt; true&quot;">​</a></h5><p>如果两边的值中有 true 或者 false，千万不要使用==。</p><p>如果两边的值中有[]、&quot;&quot;或者 0，尽量不要使用==。</p><h3 id="抽象比较" tabindex="-1">抽象比较 <a class="header-anchor" href="#抽象比较" aria-label="Permalink to &quot;抽象比较&quot;">​</a></h3><h4 id="比较双方都是字符串" tabindex="-1">比较双方都是字符串 <a class="header-anchor" href="#比较双方都是字符串" aria-label="Permalink to &quot;比较双方都是字符串&quot;">​</a></h4><h4 id="其他情况" tabindex="-1">其他情况 <a class="header-anchor" href="#其他情况" aria-label="Permalink to &quot;其他情况&quot;">​</a></h4><p>该算法仅针对 a &lt; b, <strong>a &lt;= b 会被处理为 b &lt; a</strong></p><p>比较双方首先调用 ToPrimitive，如果结果出现非字符串，就根据 ToNumber 规则将双方强制类型转换为数字来进行比较。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { x: </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { x: </span><span style="color:#79B8FF;">43</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> b); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> b); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> b); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> b); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> b); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { x: </span><span style="color:#005CC5;">42</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { x: </span><span style="color:#005CC5;">43</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> b); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> b); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> b); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> b); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> b); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>因为根据规范 a &lt;= b 被处理为 b &lt; a，然后将结果反转。因为 b &lt; a 的结果是 false，所以 a &lt;= b 的结果是 true。</p><p>这可能与我们设想的大相径庭，即&lt;=应该是“小于或者等于”。实际上 JavaScript 中&lt;=是“不大于”的意思（即！(a &gt; b)，处理为！(b &lt; a) ）。同理，a &gt;= b 处理为 b&lt;= a。</p><p>相等比较有严格相等，关系比较却没有“严格关系比较”（strict relationalcomparison）。也就是说如果要避免 a &lt; b 中发生隐式强制类型转换，我们只能确保 a 和 b 为相同的类型，除此之外别无他法。</p><h2 id="隐式类型转换" tabindex="-1">隐式类型转换 <a class="header-anchor" href="#隐式类型转换" aria-label="Permalink to &quot;隐式类型转换&quot;">​</a></h2><h3 id="数学运算符中类型转换" tabindex="-1">数学运算符中类型转换 <a class="header-anchor" href="#数学运算符中类型转换" aria-label="Permalink to &quot;数学运算符中类型转换&quot;">​</a></h3><h4 id="_1、减-乘-除" tabindex="-1">1、减/乘/除 <a class="header-anchor" href="#_1、减-乘-除" aria-label="Permalink to &quot;1、减/乘/除&quot;">​</a></h4><p><strong>我们在对各种非<code>Number</code>类型运用数学运算符(<code>- * /</code>)时，会先将非<code>Number</code>类型转换为<code>Number</code>类型。</strong></p><blockquote><p>null 转换为数字 0，undefined 转换为 NaN</p></blockquote><h4 id="_2、加法的特殊性" tabindex="-1">2、加法的特殊性 <a class="header-anchor" href="#_2、加法的特殊性" aria-label="Permalink to &quot;2、加法的特殊性&quot;">​</a></h4><ul><li>当一侧为<code>String</code>类型，被识别为字符串拼接，并会优先将另一侧转换为字符串类型。</li><li>当一侧为<code>Number</code>类型，另一侧为<strong>原始类型</strong>，则将原始类型转换为<code>Number</code>类型。</li><li>当一侧为<code>Number</code>类型，另一侧为<strong>引用类型</strong>，将引用类型和<code>Number</code>类型转换成字符串后拼接。</li></ul><h3 id="逻辑语句中的类型转换" tabindex="-1">逻辑语句中的类型转换 <a class="header-anchor" href="#逻辑语句中的类型转换" aria-label="Permalink to &quot;逻辑语句中的类型转换&quot;">​</a></h3><p>当我们使用 <code>if</code> <code>while</code> <code>for</code> 语句时，我们期望表达式是一个<code>Boolean</code>，所以一定伴随着隐式类型转换。而这里面又分为两种情况：</p><h4 id="_1、单个变量" tabindex="-1">1、单个变量 <a class="header-anchor" href="#_1、单个变量" aria-label="Permalink to &quot;1、单个变量&quot;">​</a></h4><p>只有 <code>null</code> 、<code>undefined</code>、 <code>&#39;&#39;</code> 、<code>NaN、</code> <code>0</code> 、<code>false</code> 这几个是 <code>false</code>，其他的情况都是 <code>true</code>，比如 <code>{}</code> , <code>[]</code>。</p><h4 id="_2、使用-比较中的规则" tabindex="-1">2、使用<code>==</code>比较中的规则 <a class="header-anchor" href="#_2、使用-比较中的规则" aria-label="Permalink to &quot;2、使用\`==\`比较中的规则&quot;">​</a></h4><ul><li><p>规则 1：<code>NaN</code>和其他任何类型比较永远返回<code>false</code>，包括和他自己。</p></li><li><p>规则 2：Boolean 和其他任何类型比较，Boolean 首先被转换为 Number 类型。</p></li><li><p>规则 3：<code>String</code>和<code>Number</code>比较，先将<code>String</code>转换为<code>Number</code>类型。</p></li><li><p>规则 4：<code>null == undefined</code>比较结果是<code>true</code>，除此之外，<code>null</code>、<code>undefined</code>和其他任何结果的比较值都为<code>false</code>。</p></li><li><p>规则 5：<code>原始类型</code>和<code>引用类型</code>做比较时，引用类型会依照<code>ToPrimitive</code>规则转换为原始类型。</p></li></ul><p>⭐️<code>ToPrimitive</code>规则，是引用类型向原始类型转变的规则，它遵循先<code>valueOf</code>后<code>toString</code> 的模式期望得到一个原始类型。如果还是没法得到一个原始类型，就会抛出 <code>TypeError</code>。</p><h3 id="练习" tabindex="-1"><strong>练习</strong> <a class="header-anchor" href="#练习" aria-label="Permalink to &quot;**练习**&quot;">​</a></h3><p><strong>1.</strong> <code>[] == ![]</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">	- 第一步，![] 会变成 false</span></span>
<span class="line"><span style="color:#e1e4e8;">	- 第二步，应用 规则2 ，题目变成： [] == 0</span></span>
<span class="line"><span style="color:#e1e4e8;">	- 第三步，应用 规则5 ，[]的valueOf是0，题目变成： 0 == 0</span></span>
<span class="line"><span style="color:#e1e4e8;">	- 所以， 答案是 true ！//</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">	- 第一步，![] 会变成 false</span></span>
<span class="line"><span style="color:#24292e;">	- 第二步，应用 规则2 ，题目变成： [] == 0</span></span>
<span class="line"><span style="color:#24292e;">	- 第三步，应用 规则5 ，[]的valueOf是0，题目变成： 0 == 0</span></span>
<span class="line"><span style="color:#24292e;">	- 所以， 答案是 true ！//</span></span></code></pre></div><p><strong>2.</strong> <code>[undefined] == false</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">-第一步，应用</span></span>
<span class="line"><span style="color:#e1e4e8;">规则5 ，[undefined]</span></span>
<span class="line"><span style="color:#e1e4e8;">通过toString变成</span></span>
<span class="line"><span style="color:#e1e4e8;">&#39;&#39;,</span></span>
<span class="line"><span style="color:#e1e4e8;">  题目变成</span></span>
<span class="line"><span style="color:#e1e4e8;">&#39;&#39; == false</span></span>
<span class="line"><span style="color:#e1e4e8;">- 第二步，应用</span></span>
<span class="line"><span style="color:#e1e4e8;">规则2 ，题目变成</span></span>
<span class="line"><span style="color:#e1e4e8;">&#39;&#39; == 0</span></span>
<span class="line"><span style="color:#e1e4e8;">- 第三步，应用</span></span>
<span class="line"><span style="color:#e1e4e8;">规则3 ，题目变成</span></span>
<span class="line"><span style="color:#e1e4e8;">0 == 0</span></span>
<span class="line"><span style="color:#e1e4e8;">- 所以， 答案是</span></span>
<span class="line"><span style="color:#e1e4e8;">true ！</span></span>
<span class="line"><span style="color:#e1e4e8;">// 但是 if([undefined]) 又是个true！</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">-第一步，应用</span></span>
<span class="line"><span style="color:#24292e;">规则5 ，[undefined]</span></span>
<span class="line"><span style="color:#24292e;">通过toString变成</span></span>
<span class="line"><span style="color:#24292e;">&#39;&#39;,</span></span>
<span class="line"><span style="color:#24292e;">  题目变成</span></span>
<span class="line"><span style="color:#24292e;">&#39;&#39; == false</span></span>
<span class="line"><span style="color:#24292e;">- 第二步，应用</span></span>
<span class="line"><span style="color:#24292e;">规则2 ，题目变成</span></span>
<span class="line"><span style="color:#24292e;">&#39;&#39; == 0</span></span>
<span class="line"><span style="color:#24292e;">- 第三步，应用</span></span>
<span class="line"><span style="color:#24292e;">规则3 ，题目变成</span></span>
<span class="line"><span style="color:#24292e;">0 == 0</span></span>
<span class="line"><span style="color:#24292e;">- 所以， 答案是</span></span>
<span class="line"><span style="color:#24292e;">true ！</span></span>
<span class="line"><span style="color:#24292e;">// 但是 if([undefined]) 又是个true！</span></span></code></pre></div><ol start="3"><li>other</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// &#39;&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// &#39;&#39;</span></span></code></pre></div><p>对象 <code>===</code> 比较的是内存地址，而 <code>&gt;=</code> 将比较转换后的值</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">{} === {} // false</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">// 隐式转换 toString()</span></span>
<span class="line"><span style="color:#e1e4e8;">{} &gt;= {} // true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">{} === {} // false</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">// 隐式转换 toString()</span></span>
<span class="line"><span style="color:#24292e;">{} &gt;= {} // true</span></span></code></pre></div><h3 id="附录" tabindex="-1">附录 <a class="header-anchor" href="#附录" aria-label="Permalink to &quot;附录&quot;">​</a></h3><p><img src="`+p+'" alt="convert-table"></p><h2 id="运算符优先级" tabindex="-1">运算符优先级 <a class="header-anchor" href="#运算符优先级" aria-label="Permalink to &quot;运算符优先级&quot;">​</a></h2><ul><li>&amp;&amp;运算符先于||执行</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence</a></p>',222),t=[e];function c(r,y,E,i,u,d){return n(),a("div",null,t)}const f=s(o,[["render",c]]);export{h as __pageData,f as default};
