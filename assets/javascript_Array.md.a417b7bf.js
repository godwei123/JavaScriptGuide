import{_ as s,c as a,o,Q as l}from"./chunks/framework.00751356.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/Array.md","filePath":"javascript/Array.md"}'),p={name:"javascript/Array.md"},e=l(`<h2 id="array-常见方法" tabindex="-1">Array 常见方法 <a class="header-anchor" href="#array-常见方法" aria-label="Permalink to &quot;Array 常见方法&quot;">​</a></h2><ol><li><code>Array.prototype.concat()</code></li><li><code>Array.prototype.every()</code></li><li><code>Array.prototype.fill()</code></li><li><code>Array.prototype.filter()</code></li><li><code>Array.prototype.find()</code></li><li><code>Array.prototype.findIndex()</code></li><li><code>Array.prototype.flat()</code></li><li><code>Array.prototype.flatMap()</code></li><li><code>Array.prototype.forEach()</code></li><li><code>Array.from()</code></li><li><code>Array.prototype.includes()</code></li><li><code>Array.prototype.indexOf()</code></li><li><code>Array.isArray()</code></li><li><code>Array.prototype.join()</code></li><li><code>Array.prototype.lastIndexOf()</code></li><li><code>Array.prototype.map()</code></li><li><code>Array.of()</code></li><li><code>Array.prototype.pop()</code></li><li><code>Array.prototype.push()</code></li><li><code>Array.prototype.reduce()</code></li><li><code>Array.prototype.reduceRight()</code></li><li><code>Array.prototype.reverse()</code></li><li><code>Array.prototype.shift()</code></li><li><code>Array.prototype.slice()</code></li><li><code>Array.prototype.some()</code></li><li><code>Array.prototype.sort()</code></li><li><code>Array.prototype.splice()</code></li><li><code>Array.prototype.unshift()</code></li></ol><h3 id="array-from-array-of" tabindex="-1">Array.from() &amp; Array.of() <a class="header-anchor" href="#array-from-array-of" aria-label="Permalink to &quot;Array.from() &amp; Array.of()&quot;">​</a></h3><p><code>Array.from()</code> 和 <code>Array.of()</code> 是 JavaScript 中的两个数组方法，它们的主要区别在于它们的用途和参数。</p><p><code>Array.from()</code> 方法从类数组对象或可迭代对象创建一个新的数组实例。类数组对象包括具有 length 属性和可索引元素的对象，或者可迭代对象如 Set 和 Map。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> set </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;c&quot;</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arrFromSet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(set);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(arrFromSet); </span><span style="color:#6A737D;">// Output: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arrFromSet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(set);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arrFromSet); </span><span style="color:#6A737D;">// Output: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span></span></code></pre></div><p><code>Array.of()</code> 方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arrOfNumbers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(arrOfNumbers); </span><span style="color:#6A737D;">// Output: [1, 2, 3]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arrOfNumbers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arrOfNumbers); </span><span style="color:#6A737D;">// Output: [1, 2, 3]</span></span></code></pre></div><p>所以，<code>Array.from()</code> 主要用于将类数组对象或可迭代对象转换为数组，而 <code>Array.of()</code> 主要用于创建一个新的数组实例。</p><h3 id="other" tabindex="-1">other <a class="header-anchor" href="#other" aria-label="Permalink to &quot;other&quot;">​</a></h3><p>使用 delete 运算符可以将单元从数组中删除，但是请注意，单元删除后，数组的 length 属性并不会发生变化。删除的位置变为 &lt;1 empty item&gt;</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> nums </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">nums[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">nums[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(nums[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]); </span><span style="color:#6A737D;">//undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> nums </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">nums[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">nums[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(nums[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">//undefined</span></span></code></pre></div><p>其中的“空白单元”（empty slot）可能会导致出人意料的结果。a[1]的值为 undefined，但这与将其显式赋值为 undefined（a[1] =undefined）还是有所区别。</p><p>如果字符串键值能够被强制类型转换为十进制数字的话，它就会被当作数字索引来处理。a[“13”]=2; a.length =&gt; 14</p><p>类数组 =&gt; 数组</p><p>Array.from(arguments)</p><p>Array.prototype.slice.call(arguments)</p>`,17),n=[e];function r(t,c,y,i,d,E){return o(),a("div",null,n)}const h=s(p,[["render",r]]);export{u as __pageData,h as default};
