import{_ as s,c as a,o as e,Q as t}from"./chunks/framework.00751356.js";const g=JSON.parse('{"title":"选择器","description":"","frontmatter":{},"headers":[],"relativePath":"basic/css/selectors.md","filePath":"basic/css/selectors.md"}'),o={name:"basic/css/selectors.md"},l=t(`<h1 id="选择器" tabindex="-1">选择器 <a class="header-anchor" href="#选择器" aria-label="Permalink to &quot;选择器&quot;">​</a></h1><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>类型选择器</td><td><code>h1 { }</code></td></tr><tr><td>通配选择器</td><td><code>* { }</code></td></tr><tr><td>类选择器</td><td><code>.box { }</code></td></tr><tr><td>ID 选择器</td><td><code>#unique { }</code></td></tr><tr><td>标签属性选择器</td><td><code>a[title] { }</code></td></tr><tr><td>伪类选择器</td><td><code>p:first-child { }</code></td></tr><tr><td>伪元素选择器</td><td><code>p::first-line { }</code></td></tr><tr><td>后代选择器</td><td><code>article p</code></td></tr><tr><td>子代选择器</td><td><code>article &gt; p</code></td></tr><tr><td>相邻兄弟选择器</td><td><code>h1 + p</code></td></tr><tr><td>通用兄弟选择器</td><td><code>h1 ~ p</code></td></tr></tbody></table><h2 id="元素、类和-id-选择器" tabindex="-1">元素、类和 ID 选择器 <a class="header-anchor" href="#元素、类和-id-选择器" aria-label="Permalink to &quot;元素、类和 ID 选择器&quot;">​</a></h2><p><strong>类型选择器</strong>有时也叫做“标签名选择器”或者是”元素选择器“，因为它在文档中选择了一个 HTML 标签元素的缘故。</p><p>全局选择器，是由一个星号（<code>*</code>）代指的，它选中了文档中的所有内容（或者是父元素中的所有内容，比如，它紧随在其他元素以及邻代运算符之后的时候）。</p><p>类选择器以一个句点（<code>.</code>）开头，会选择文档中应用了这个类的所有元素。</p><p>ID 选择器开头为 <code>#</code> 而非句点，不过基本上和类选择器是同种用法。可是在一篇文档中，一个 ID 只会用到一次。它能选中设定了<code>id</code>的元素，你可以在 ID 前面加上类型选择器，只指向元素和 ID 都匹配的类。</p><h2 id="标签属性选择器" tabindex="-1">标签属性选择器 <a class="header-anchor" href="#标签属性选择器" aria-label="Permalink to &quot;标签属性选择器&quot;">​</a></h2><p>这些选择器允许基于一个元素自身是否存在（例如<code>href</code>）或者基于各式不同的按属性值的匹配，来选取元素。</p><table><thead><tr><th>选择器</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td><code>[attr]</code></td><td><code>a[title]</code></td><td>匹配带有一个名为<em>attr</em>的属性的元素,方括号里的值。</td></tr><tr><td><code>[attr=value]</code></td><td><code>a[href=”https://example.com“]</code></td><td>匹配带有一个名为<em>attr</em>的属性的元素，其值正为<em>value</em>,引号中的字符串</td></tr><tr><td><code>[attr~=value]</code></td><td><code>p[class~=”special“]</code></td><td>匹配带有一个名为<em>attr</em>的属性的元素，其值正为<em>value</em>，或者匹配带有一个<em>attr</em>属性的元素，其值有一个或者更多，至少有一个和<em>value</em>匹配。注意，在一列中的好几个值，是用空格隔开的。</td></tr><tr><td><code>[attr=value]</code></td><td><code>div[lang=&#39;zh&#39;]</code></td><td>匹配带有一个名为<em>attr</em>的属性的元素，其值可正为<em>value</em>，或者开始为<em>value</em>，后面紧随着一个连字符。</td></tr></tbody></table><ul><li>使用<code>li[class]</code>，我们就能匹配任何有 class 属性的选择器。</li><li><code>li[class=”a“]</code>匹配带有一个<code>a</code>类的选择器，不过不会选中一部分值为<code>a</code>而另一部分是另一个用空格隔开的值的类。</li><li><code>li[class~=”a“]</code>会匹配一个<code>a</code>类，不过也可以匹配一列用空格分开、包含<code>a</code>类的值。</li></ul><p>子字符串匹配选择器</p><p>这些选择器让更高级的属性的值的子字符串的匹配变得可行。例如，如果你有<code>box-warning</code>和<code>box-error</code>类，想把开头为“box-”字符串的每个物件都匹配上的话，你可以用<code>[class^=”box-“]</code>来把它们两个都选中。</p><table><thead><tr><th>选择器</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td><code>[attr^=value]</code></td><td><code>li[class^=”box-“]</code></td><td>匹配带有一个名为<em>attr</em>的属性的元素，其值开头为<em>value</em>子字符串。</td></tr><tr><td><code>[attr$=value]</code></td><td><code>li[class$=”-box“]</code></td><td>匹配带有一个名为<em>attr</em>的属性的元素，其值结尾为<em>value</em>子字符串</td></tr><tr><td><code>[attr*=value]</code></td><td><code>li[class*=”box“]</code></td><td>匹配带有一个名为<em>attr</em>的属性的元素，其值的字符串中的任何地方，至少出现了一次<em>value</em>子字符串。</td></tr></tbody></table><p>下个示例展示了这些选择器的用法：</p><ul><li><code>li[class^=”a“]</code>匹配了任何值开头为<code>a</code>的属性。</li><li><code>li[class$=”a“]</code>匹配了任何值结尾为<code>a</code>的属性。</li><li><code>li[class*=”a“]</code>匹配了任何值的字符串中出现了<code>a</code>的属性。</li></ul><h3 id="大小写敏感" tabindex="-1">大小写敏感 <a class="header-anchor" href="#大小写敏感" aria-label="Permalink to &quot;大小写敏感&quot;">​</a></h3><p>如果你想在大小写不敏感的情况下，匹配属性值的话，你可以在闭合括号之前，使用<code>i</code>值。这个标记告诉浏览器，要以大小写不敏感的方式匹配 ASCII 字符。没有了这个标记的话，值会按照文档语言对大小写的处理方式，进行匹配——HTML 中是大小写敏感的。</p><p>下面的示例中，第一个选择器将会匹配一个开头为<code>a</code>的值，这样它只匹配了第一项，因为另外两项开头是大写的 A。第二个选择器使用了大小写不敏感的标记，于是匹配了所有项。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">class</span><span style="color:#F97583;">^=</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">i</span><span style="color:#E1E4E8;">] {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">li</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">^=</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">i</span><span style="color:#24292E;">] {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">red</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="伪类和伪元素选择器" tabindex="-1">伪类和伪元素选择器 <a class="header-anchor" href="#伪类和伪元素选择器" aria-label="Permalink to &quot;伪类和伪元素选择器&quot;">​</a></h2><p>伪类是选择器的一种，它用于选择处于特定状态的元素，比如当它们是这一类型的第一个元素时，或者是当鼠标指针悬浮在元素上面的时候。它们表现得会像是你向你的文档的某个部分应用了一个类一样，帮你在你的标记文本中减少多余的类，让你的代码更灵活、更易于维护。</p><p>伪类就是开头为冒号的关键字：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">:</span><span style="color:#85E89D;">pseudo-class-name</span><span style="color:#E1E4E8;"> ;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">:</span><span style="color:#22863A;">pseudo-class-name</span><span style="color:#24292E;"> ;</span></span></code></pre></div><p>伪元素以类似方式表现，不过表现得是像你往标记文本中加入全新的 HTML 元素一样，而不是向现有的元素上应用类。伪元素开头为双冒号<code>::</code>。</p><h3 id="伪类选择器" tabindex="-1">伪类选择器 <a class="header-anchor" href="#伪类选择器" aria-label="Permalink to &quot;伪类选择器&quot;">​</a></h3><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td><code>:active</code></td><td>在用户激活（例如点击）元素的时候匹配。</td></tr><tr><td><code>:any-link</code></td><td>匹配一个链接的<code>:link</code>和<code>:visited</code>状态。</td></tr><tr><td><code>:blank</code></td><td>匹配空输入值的<code>&lt;input&gt;</code>元素。</td></tr><tr><td><code>:checked</code></td><td>匹配处于选中状态的单选或者复选框。</td></tr><tr><td><code>:current</code></td><td>匹配正在展示的元素，或者其上级元素。</td></tr><tr><td><code>:default</code></td><td>匹配一组相似的元素中默认的一个或者更多的 UI 元素。</td></tr><tr><td><code>:dir</code></td><td>基于其方向性（HTML <code>dir</code>属性或者 CSS <code>direction</code>属性的值）匹配一个元素。</td></tr><tr><td><code>:disabled</code></td><td>匹配处于关闭状态的用户界面元素</td></tr><tr><td><code>:empty</code></td><td>匹配除了可能存在的空格外，没有子元素的元素。</td></tr><tr><td><code>:enabled</code></td><td>匹配处于开启状态的用户界面元素。</td></tr><tr><td><code>:first</code></td><td>匹配分页媒体的第一页。</td></tr><tr><td><code>:first-child</code></td><td>匹配兄弟元素中的第一个元素。</td></tr><tr><td><code>:first-of-type</code></td><td>匹配兄弟元素中第一个某种类型的元素。</td></tr><tr><td><code>:focus</code></td><td>当一个元素有焦点的时候匹配。</td></tr><tr><td><code>:focus-visible</code></td><td>当元素有焦点，且焦点对用户可见的时候匹配。</td></tr><tr><td><code>:focus-within</code></td><td>匹配有焦点的元素，以及子代元素有焦点的元素。</td></tr><tr><td><code>:future</code></td><td>匹配当前元素之后的元素。</td></tr><tr><td><code>:hover</code></td><td>当用户悬浮到一个元素之上的时候匹配。</td></tr><tr><td><code>:indeterminate</code></td><td>匹配未定态值的 UI 元素，通常为 复选框。</td></tr><tr><td><code>:in-range</code></td><td>用一个区间匹配元素，当值处于区间之内时匹配。</td></tr><tr><td><code>:invalid</code></td><td>匹配诸如<code>&lt;input&gt;</code>的位于不可用状态的元素。</td></tr><tr><td><code>:lang</code></td><td>基于语言（HTML lang 属性的值）匹配元素。</td></tr><tr><td><code>:last-child</code></td><td>匹配兄弟元素中最末的那个元素。</td></tr><tr><td><code>:last-of-type</code></td><td>匹配兄弟元素中最后一个某种类型的元素。</td></tr><tr><td><code>:left</code></td><td>在分页媒体中，匹配左手边的页。</td></tr><tr><td><code>:link</code></td><td>匹配未曾访问的链接。</td></tr><tr><td><code>:local-link</code></td><td>匹配指向和当前文档同一网站页面的链接。</td></tr><tr><td><code>:is()</code></td><td>匹配传入的选择器列表中的任何选择器。</td></tr><tr><td><code>:not</code></td><td>匹配作为值传入自身的选择器未匹配的物件。</td></tr><tr><td><code>:nth-child</code></td><td>匹配一列兄弟元素中的元素——兄弟元素按照<em>an+b</em>形式的式子进行匹配（比如 2n+1 匹配元素 1、3、5、7 等。即所有的奇数个）。</td></tr><tr><td><code>:nth-of-type</code></td><td>匹配某种类型的一列兄弟元素（比如，<code>&lt;p&gt;</code>元素）——兄弟元素按照<em>an+b</em>形式的式子进行匹配（比如 2n+1 匹配元素 1、3、5、7 等。即所有的奇数个）。</td></tr><tr><td><code>:nth-last-child</code></td><td>匹配一列兄弟元素，从后往前倒数。兄弟元素按照<em>an+b</em>形式的式子进行匹配（比如 2n+1 匹配按照顺序来的最后一个元素，然后往前两个，再往前两个，诸如此类。从后往前数的所有奇数个）。</td></tr><tr><td><code>:nth-last-of-type</code></td><td>匹配某种类型的一列兄弟元素（比如，<code>&lt;p&gt;</code>元素），从后往前倒数。兄弟元素按照<em>an+b</em>形式的式子进行匹配（比如 2n+1 匹配按照顺序来的最后一个元素，然后往前两个，再往前两个，诸如此类。从后往前数的所有奇数个）。</td></tr><tr><td><code>:only-child</code></td><td>匹配没有兄弟元素的元素。</td></tr><tr><td><code>:only-of-type</code></td><td>匹配兄弟元素中某类型仅有的元素。</td></tr><tr><td><code>:optional</code></td><td>匹配不是必填的 form 元素。</td></tr><tr><td><code>:out-of-range</code></td><td>按区间匹配元素，当值不在区间内的的时候匹配。</td></tr><tr><td><code>:past</code></td><td>匹配当前元素之前的元素。</td></tr><tr><td><code>:placeholder-shown</code></td><td>匹配显示占位文字的 input 元素。</td></tr><tr><td><code>:playing</code></td><td>匹配代表音频、视频或者相似的能“播放”或者“暂停”的资源的，且正在“播放”的元素。</td></tr><tr><td><code>:paused</code></td><td>匹配代表音频、视频或者相似的能“播放”或者“暂停”的资源的，且正在“暂停”的元素。</td></tr><tr><td><code>:read-only</code></td><td>匹配用户不可更改的元素。</td></tr><tr><td><code>:read-write</code></td><td>匹配用户可更改的元素。</td></tr><tr><td><code>:required</code></td><td>匹配必填的 form 元素。</td></tr><tr><td><code>:right</code></td><td>在分页媒体中，匹配右手边的页。</td></tr><tr><td><code>:root</code></td><td>匹配文档的根元素。</td></tr><tr><td><code>:scope</code></td><td>匹配任何为参考点元素的的元素。</td></tr><tr><td><code>:valid</code></td><td>匹配诸如<code>&lt;input&gt;</code>元素的处于可用状态的元素。</td></tr><tr><td><code>:target</code></td><td>匹配当前 URL 目标的元素（例如如果它有一个匹配当前 URL 分段的元素）。</td></tr><tr><td><code>:visited</code></td><td>匹配已访问链接。</td></tr></tbody></table><h4 id="常见伪类选择器" tabindex="-1">常见伪类选择器 <a class="header-anchor" href="#常见伪类选择器" aria-label="Permalink to &quot;常见伪类选择器&quot;">​</a></h4><h5 id="元素状态" tabindex="-1">元素状态 <a class="header-anchor" href="#元素状态" aria-label="Permalink to &quot;元素状态&quot;">​</a></h5><blockquote><p><code>:active、:empty</code>、<code>:visited</code></p><p><code>:focus</code> 、<code>:focus-visible</code>、 <code>:focus-within</code></p></blockquote><h5 id="元素顺序个数" tabindex="-1">元素顺序个数 <a class="header-anchor" href="#元素顺序个数" aria-label="Permalink to &quot;元素顺序个数&quot;">​</a></h5><blockquote><p><code>:nth-child()</code>、<code>:nth-of-type()</code> &gt; <code>:first-child</code>、<code>:first-of-type</code> &gt; <code>:last-child</code>、<code>:last-of-type</code> &gt; <code>:only-child</code>、<code>:only-of-type</code></p></blockquote><h5 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h5><blockquote><p><code>:is()</code>, <code>:not()</code>, <code>:where()</code></p></blockquote><h3 id="伪元素选择器" tabindex="-1">伪元素选择器 <a class="header-anchor" href="#伪元素选择器" aria-label="Permalink to &quot;伪元素选择器&quot;">​</a></h3><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td><code>::after</code></td><td>匹配出现在原有元素的实际内容之后的一个可样式化元素。</td></tr><tr><td><code>::before</code></td><td>匹配出现在原有元素的实际内容之前的一个可样式化元素。</td></tr><tr><td><code>::first-letter</code></td><td>匹配元素的第一个字母。</td></tr><tr><td><code>::first-line</code></td><td>匹配包含此伪元素的元素的第一行。</td></tr><tr><td><code>::grammar-error</code></td><td>匹配文档中包含了浏览器标记的语法错误的那部分。</td></tr><tr><td><code>::selection</code></td><td>匹配文档中被选择的那部分。</td></tr><tr><td><code>::spelling-error</code></td><td>匹配文档中包含了浏览器标记的拼写错误的那部分。</td></tr></tbody></table><h2 id="关系选择器" tabindex="-1">关系选择器 <a class="header-anchor" href="#关系选择器" aria-label="Permalink to &quot;关系选择器&quot;">​</a></h2><h3 id="后代选择器" tabindex="-1">后代选择器 <a class="header-anchor" href="#后代选择器" aria-label="Permalink to &quot;后代选择器&quot;">​</a></h3><p>后代选择器——典型用单个空格（” “）字符——组合两个选择器，比如，第二个选择器匹配的元素被选择，如果他们有一个祖先（父亲，父亲的父亲，父亲的父亲的父亲，等等）元素匹配第一个选择器。选择器利用后代组合符被称作后代选择器。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">body article p</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">body article p</span></span></code></pre></div><h3 id="子代关系选择器" tabindex="-1">子代关系选择器 <a class="header-anchor" href="#子代关系选择器" aria-label="Permalink to &quot;子代关系选择器&quot;">​</a></h3><p>子代关系选择器是个大于号（<code>&gt;</code>），只会在选择器选中直接子元素的时候匹配。继承关系上更远的后代则不会匹配。例如，只选中作为<code>&lt;article&gt;</code>的直接子元素的<code>&lt;p&gt;</code>元素：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">article &gt; p</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">article &gt; p</span></span></code></pre></div><h3 id="邻接兄弟" tabindex="-1">邻接兄弟 <a class="header-anchor" href="#邻接兄弟" aria-label="Permalink to &quot;邻接兄弟&quot;">​</a></h3><p>邻接兄弟选择器（<code>+</code>）用来选中恰好处于另一个在继承关系上同级的元素旁边的物件。例如，选中所有紧随<code>&lt;p&gt;</code>元素之后的<code>&lt;img&gt;</code>元素：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">p + img</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">p + img</span></span></code></pre></div><h3 id="通用兄弟" tabindex="-1">通用兄弟 <a class="header-anchor" href="#通用兄弟" aria-label="Permalink to &quot;通用兄弟&quot;">​</a></h3><p>如果你想选中一个元素的兄弟元素，即使它们不直接相邻，你还是可以使用通用兄弟关系选择器（<code>~</code>）。要选中所有的<code>&lt;p&gt;</code>元素后<em>任何地方</em>的<code>&lt;img&gt;</code>元素，我们会这样做：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">p ~ img</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">p ~ img</span></span></code></pre></div><h2 id="优先级与权重" tabindex="-1">优先级与权重 <a class="header-anchor" href="#优先级与权重" aria-label="Permalink to &quot;优先级与权重&quot;">​</a></h2><p>浏览器通过<strong>优先级</strong>来判断哪些属性值与一个元素最为相关，从而在该元素上应用这些属性值。优先级是基于不同种类[选择器]组成的匹配规则。</p><p>优先级是如何计算的？</p><p>优先级就是分配给指定的 CSS 声明的一个权重，它由 匹配的选择器中的 每一种选择器类型的 数值 决定。</p><p>而当优先级与多个 CSS 声明中任意一个声明的优先级相等的时候，CSS 中最后的那个声明将会被应用到元素上。</p><p>当同一个元素有多个声明的时候，优先级才会有意义。因为每一个直接作用于元素的 CSS 规则总是会接管/覆盖（take over）该元素从祖先元素继承而来的规则。</p><ul><li><strong>一定</strong>要优先考虑使用样式规则的优先级来解决问题而不是  <code>!important</code></li><li><strong>只有</strong>在需要覆盖全站或外部 CSS 的特定页面中使用  <code>!important</code></li><li><strong>永远不要</strong>在你的插件中使用  <code>!important</code></li><li><strong>永远不要</strong>在全站范围的 CSS 代码中使用  <code>!important</code></li><li><strong>与其使用</strong> <strong><code>!important</code></strong>，你可以：</li></ul><ol><li><p>更好地利用 CSS 级联属性</p></li><li><p>使用更具体的规则。在您选择的元素之前，增加一个或多个其他元素，使选择器变得更加具体，并获得更高的优先级。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;”test“&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;Text&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;”test“&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;Text&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">div</span><span style="color:#B392F0;">#test</span><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">green</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">blue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">div</span><span style="color:#6F42C1;">#test</span><span style="color:#24292E;"> </span><span style="color:#22863A;">span</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">green</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#22863A;">span</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">blue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#22863A;">span</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">red</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>无论 c​ss 语句的顺序是什么样的，文本都会是绿色的（green），因为这一条规则是最有针对性、优先级最高的。（同理，无论语句顺序怎样，蓝色 blue 的规则都会覆盖红色 red 的规则）</p></li><li><p>对于（2）的一种特殊情况，当您无其他要指定的内容时，请复制简单的选择器以增加特异性。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">#myId#myId</span><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">yellow</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">.myClass.myClass</span><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">orange</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">#myId#myId</span><span style="color:#24292E;"> </span><span style="color:#22863A;">span</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">yellow</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">.myClass.myClass</span><span style="color:#24292E;"> </span><span style="color:#22863A;">span</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">orange</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ol><p>什么的情况下可以使用  <code>!important</code>：</p><p>A) 覆盖内联样式</p><p>你的网站上有一个设定了全站样式的 CSS 文件，同时你（或是你同事）写了一些很差的内联样式。</p><p>全局的 CSS 文件会在全局范围内设置网站的外观，而直接在各个元素上定义的内联样式可能会覆盖您的全局 CSS 文件。内联样式和 !important 都被认为是非常不好的做法，但是有时你可以在 CSS 文件里用 !important 去覆盖内联样式。</p><p>在这种情况下，你就可以在你全局的 CSS 文件中写一些  <code>!important</code>  的样式来覆盖掉那些直接写在元素上的行内样式。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;div class=”foo“ style=”color: red;“&gt;What color am I?&lt;/div&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;div class=”foo“ style=”color: red;“&gt;What color am I?&lt;/div&gt;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">.foo[style*=”color: red“] {</span></span>
<span class="line"><span style="color:#e1e4e8;">  color: firebrick !important;</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">.foo[style*=”color: red“] {</span></span>
<span class="line"><span style="color:#24292e;">  color: firebrick !important;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>许多 JavaScript 框架和库都添加了内联样式。有时候可以用<code>!important</code>与优先级高的选择器一起使用，以重写覆盖这些内联样式。</p><p>B) 覆盖优先级高的选择器</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#someElement p {</span></span>
<span class="line"><span style="color:#e1e4e8;">  color: blue;</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">p.awesome {</span></span>
<span class="line"><span style="color:#e1e4e8;">  color: red;</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#someElement p {</span></span>
<span class="line"><span style="color:#24292e;">  color: blue;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">p.awesome {</span></span>
<span class="line"><span style="color:#24292e;">  color: red;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>在外层有  <code>#someElement</code>  的情况下，你怎样能使  <code>awesome</code>的段落变成红色呢？这种情况下，如果不使用  <code>!important</code>，第一条规则永远比第二条的优先级更高</p><p>怎样覆盖  <code>!important</code></p><p>A) 很简单，只需再添加一条 带  <code>!important</code>  的 CSS 规则，再给这个给选择器更高的优先级（添加一个标签，ID 或类）；或是添加一样选择器，把它的位置放在原有声明的后面（总之，最后定义一条规则比胜）。</p><p>一些拥有更高优先级的例子：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">table</span><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">height</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">50</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!important</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">.myTable</span><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">height</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">50</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!important</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">#myTable</span><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">height</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">50</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!important</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">table</span><span style="color:#24292E;"> </span><span style="color:#22863A;">td</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">height</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">50</span><span style="color:#D73A49;">px</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!important</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">.myTable</span><span style="color:#24292E;"> </span><span style="color:#22863A;">td</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">height</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">50</span><span style="color:#D73A49;">px</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!important</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">#myTable</span><span style="color:#24292E;"> </span><span style="color:#22863A;">td</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">height</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">50</span><span style="color:#D73A49;">px</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!important</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>B) 或者使用相同的选择器，但是置于已有的样式之后：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">td { height: 50px !important; }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">td { height: 50px !important; }</span></span></code></pre></div><p>C) 或干脆改写原来的规则，以避免使用  <code>!important</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">[id=”someElement“] p {</span></span>
<span class="line"><span style="color:#e1e4e8;">  color: blue;</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">p.awesome {</span></span>
<span class="line"><span style="color:#e1e4e8;">  color: red;</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[id=”someElement“] p {</span></span>
<span class="line"><span style="color:#24292e;">  color: blue;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">p.awesome {</span></span>
<span class="line"><span style="color:#24292e;">  color: red;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>将 id 作为属性选择器的一部分而不是 id 选择器，将使其具有与类相同的特异性。上面的两个选择器现在具有相同的权重。在优先级相同情况下，后面定义的 CSS 样式会被应用。</p><p><code>:not</code>  否定伪类在优先级计算中不会被看作是伪类。事实上，在计算选择器数量时还是会把其中的选择器当做普通选择器进行计数。</p><p>伪类<code>:where()</code>实验性总是将其特异性替换为零。</p><ul><li><p>优先级是基于选择器的形式进行计算的。在下面的例子中，尽管选择器 *[id=”foo“] 选择了一个 ID，但是它还是作为一个属性选择器来计算自身的优先级。</p></li><li><p>无视 Dom 树中的距离，</p></li><li><p>为目标元素直接添加样式，永远比继承样式的优先级高，无视优先级的遗传规则。</p></li></ul><h2 id="选择器权重值和优先级" tabindex="-1">选择器权重值和优先级 <a class="header-anchor" href="#选择器权重值和优先级" aria-label="Permalink to &quot;选择器权重值和优先级&quot;">​</a></h2><p>!important &gt; 内联 &gt; #id &gt; .class/属性选择器/:伪类 &gt; 标签/::伪元素 &gt; * &gt; 继承</p><p>对于选择器的优先级:</p><ul><li>标签选择器、伪元素选择器:1;</li><li>类选择器、伪类选择器、属性选择器:10;</li><li>id 选择器:100;</li><li>内联样式:1000;</li></ul><p>注意事项:</p><ul><li>!important 声明的样式的优先级最高;</li><li>如果优先级相同,则最后出现的样式生效;</li><li>继承得到的样式的优先级最低;</li><li>通用选择器（*）、子选择器（&gt;）和相邻同胞选择器（+）并不在这四个等级中,所以它们的权值都为 0 ;</li><li>样式表的来源不同时,优先级顺序为:内联样式 &gt; 内部样式 &gt; 外部样式 &gt; 浏览器用户自定义样式 &gt; 浏览器默认样式.</li></ul>`,86),n=[l];function p(c,d,r,i,y,E){return e(),a("div",null,n)}const u=s(o,[["render",p]]);export{g as __pageData,u as default};
