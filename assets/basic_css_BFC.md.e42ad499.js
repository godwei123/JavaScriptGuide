import{_ as l,c as o,o as s,V as e}from"./chunks/framework.25f281e8.js";const C=JSON.parse('{"title":"BFC","description":"","frontmatter":{},"headers":[],"relativePath":"basic/css/BFC.md","filePath":"basic/css/BFC.md"}'),a={name:"basic/css/BFC.md"},n=e(`<h1 id="bfc" tabindex="-1">BFC <a class="header-anchor" href="#bfc" aria-label="Permalink to &quot;BFC&quot;">​</a></h1><h2 id="高度塌缩" tabindex="-1">高度塌缩 <a class="header-anchor" href="#高度塌缩" aria-label="Permalink to &quot;高度塌缩&quot;">​</a></h2><p>在浮动布局中,父元素默认是被子元素撑开的,当子元素浮动后,其会完全脱离文档流,子元素从文档流中脱离,将会无法撑起父元素的高度,导致父元素的高度丢失,父元素高度丢失后,其下的元素会自动上移,导致页面布局混乱,所以高度塌陷是比较常见的问题.</p><p><strong>解决办法:</strong></p><ol><li><p>BFC</p><p>BFC（Block Formatting Context）块级格式化环境</p><p>BFC 是 CSS 中的一个隐藏属性,可以为一个元素开启 BFC;开启 BFC 该元素就是一个独立布局区域</p><p>元素开启 BFC 后的特点:</p><ul><li><p>开启 BFC 的元素不会被浮动元素覆盖</p></li><li><p>开启 BFC 的元素子元素和父元素的外边距不会重叠</p></li><li><p>开启 BFC 的元素可以包含浮动的元素</p></li></ul><p>需要通过一些特殊方式开启元素 BFC:</p><ul><li>设置元素的浮动 （不推荐）. <code>float: left;</code></li><li>将元素设置为行内块元素 （不推荐）. <code>display: inline-block;</code></li><li>将元素 overflow 设置为一个非 visible 的值,常见方式为元素设置 overflow:hidden 开启其 BFC,以使其可以包含浮动的元素. <code>overflow: auto;</code></li></ul><p>第一种方式设置父元素浮动使父元素也脱离了文档流;第二种一般不采用设置行内块元素的方式;第三种可以使父元素保持块元素特点,同时宽高由子元素撑开.</p></li><li><p>使用 clear 解决</p></li></ol><p>设置清除浮动以后,浏览器会自动为元素添加一个上外边距以使其位置不受其他元素影响 添加 <code>clear: both;</code> 清除浮动元素对当前元素所产生的影响</p><ol start="3"><li>通过 HTML 的方式来影响 CSS 样式</li></ol><p>可以通过设置一个 div（与浮动元素同一级）,给他设置<code>clear:both</code>来撑开父元素的空间,这样父元素的空间就会随着子元素宽高的变化而变化,不受浮动影响;</p><ol start="4"><li>最终解决方案</li></ol><p>css 样式里在 box 的后面用 content 添加一个空元素,并设置为块元素,clear:both.</p><p>在父级元素添加 class=“clearfix”,样式如下:</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">clearfix</span><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">before</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">clearfix</span><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">after</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> table</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">clear</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> both</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="margin-重叠问题" tabindex="-1">margin 重叠问题 <a class="header-anchor" href="#margin-重叠问题" aria-label="Permalink to &quot;margin 重叠问题&quot;">​</a></h2><p><strong>问题描述:</strong></p><p>两个块级元素的上外边距和下外边距可能会合并（折叠）为一个外边距,其大小会取其中外边距值大的那个,这种行为就是外边距折叠.需要注意的是,<strong>浮动的元素和绝对定位</strong>这种脱离文档流的元素的外边距不会折叠.重叠只会出现在<strong>垂直方向</strong>.</p><p>下面代码效果: box1 和 box2 都有上边距 100px,相对位置没有变化.和预期效果（子元素 div.box2 会从左上角移动到父元素 div.box1 的左下角,父元素位置不变）不同</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">box1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">background-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> saddlebrown</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">box2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">background-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> sandybrown</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">margin-top</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">box1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">box2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><strong>计算原则:</strong></p><p>折叠合并后外边距的计算原则如下:</p><ul><li>如果两者都是正数,那么就去最大者</li><li>如果是一正一负,就会正值减去负值的绝对值</li><li>两个都是负值时,用 0 减去两个中绝对值大的那个</li></ul><p><strong>解决办法:</strong></p><p>对于折叠的情况,主要有两种:<strong>兄弟之间重叠</strong>和<strong>父子之间重叠</strong></p><p>（1）兄弟之间重叠</p><ul><li>底部元素变为行内盒子:<code>display: inline-block</code></li><li>底部元素设置浮动:<code>float</code></li><li>底部元素的 position 的值为<code>absolute/fixed</code></li></ul><p>（2）父子之间重叠</p><ul><li>父元素加入:<code>overflow: hidden</code></li><li>父元素添加透明边框:<code>border:1px solid transparent</code></li><li>子元素变为行内盒子:<code>display: inline-block</code></li><li>子元素加入浮动属性或定位</li></ul><h2 id="bfc-块级格式化上下文" tabindex="-1">BFC 块级格式化上下文 <a class="header-anchor" href="#bfc-块级格式化上下文" aria-label="Permalink to &quot;BFC 块级格式化上下文&quot;">​</a></h2><p><a href="https://juejin.cn/post/6844904169875177479" target="_blank" rel="noreferrer">https://juejin.cn/post/6844904169875177479</a></p><p>BFC 是一个独立的区域,它内部的元素都依照它的规则渲染,并且不会与 BFC 外部打交道.</p><p><strong>以下方式会创建 BFC:</strong></p><ul><li>根元素或包含根元素的元素</li><li>浮动元素（元素的 float 不是 none）</li><li>绝对定位元素（元素的 position 为 absolute 或 fixed）</li><li>行内块元素（元素的 display 为 inline-block）</li><li>表格单元格（元素的 display 为 table-cell,HTML 表格单元格默认为该值）</li><li>表格标题（元素的 display 为 table-caption,HTML 表格标题默认为该值）</li><li>匿名表格单元格元素（元素的 display 为 table、table-row、 table-row-group、table-header-group、table-footer-group（分别是 HTML table、row、tbody、thead、tfoot 的默认属性）或 inline-table）</li><li>overflow 值不为 visible 的块元素</li><li>display 值为 flow-root 的元素</li><li>contain 值为 layout、content 或 strict 的元素</li><li>弹性元素（display 为 flex 或 inline-flex 元素的直接子元素）</li><li>网格元素（display 为 grid 或 inline-grid 元素的直接子元素）</li><li>多列容器（元素的 column-count 或 column-width 不为 auto,包括 column-count 为 1）</li><li>column-span 为 all 的元素始终会创建一个新的 BFC,即使该元素没有包裹在一个多列容器中</li></ul><p>当一个元素设置了新的 BFC 后,就和这个元素外部的 BFC 没有关系了,这个元素只会去约束自己内部的子元素.</p><p><strong>BFC 的布局规则例如以下:</strong></p><ul><li>内部的盒子会在垂直方向,一个个地放置;</li><li>盒子垂直方向的距离由 margin 决定,属于同一个 BFC 的两个相邻 Box 的上下 margin 会发生重叠;</li><li>每一个元素的左边,与包含块的左边相接触（对于从右往左的布局,则相反）,即使存在浮动也是如此;</li><li>BFC 的区域不会与 float 重叠;</li><li>BFC 就是页面上的一个隔离的独立容器,容器里面的子元素不会影响到外面的元素.反之也如此;</li><li>计算 BFC 的高度时,浮动元素也參与计算.</li></ul><p><strong>应用场景</strong></p><p><strong>1.防止浮动元素高度塌陷</strong></p><p>不适用 BFC 情况下，子元素使用浮动，父元素高度会塌陷</p><p><strong>2.避免外边距折叠</strong></p><p>当 2 个 box 在同一个 BFC 容器内，同时使用 margin 会引起外边距重合</p><p><strong>3.自适应两栏布局</strong></p><p>根据规则 BFC 的区域不会与浮动元素的 box 重叠，可以实现自适应两栏布局</p><h2 id="层叠上下文" tabindex="-1">层叠上下文 <a class="header-anchor" href="#层叠上下文" aria-label="Permalink to &quot;层叠上下文&quot;">​</a></h2><p>我们假定用户正面向（浏览器）视窗或网页，而 HTML 元素沿着其相对于用户的一条虚构的 z 轴排开，<strong>层叠上下文</strong>就是对这些 HTML 元素的一个三维构想。众 HTML 元素基于其元素属性按照优先级顺序占据这个空间。</p><p>层叠上下文</p><p>在本篇之前的部分——运用 z-index，（我们认识到）某些元素的渲染顺序是由其  <code>z-index</code>  的值影响的。这是因为这些元素具有能够使他们形成一个<em>层叠上下文</em>的特殊属性。</p><p>文档中的层叠上下文由满足以下任意一个条件的元素形成：</p><ul><li>文档根元素（<code>&lt;html&gt;</code>）；</li><li><code>position</code>  值为  <code>absolute</code>（绝对定位）或  <code>relative</code>（相对定位）且  <code>z-index</code>  值不为  <code>auto</code>  的元素；</li><li><code>position</code>  值为  <code>fixed</code>（固定定位）或  <code>sticky</code>（粘滞定位）的元素（沾滞定位适配所有移动设备上的浏览器，但老的桌面浏览器不支持）；</li><li>flex 容器的子元素，且  <code>z-index</code>  值不为  <code>auto</code>；</li><li>grid 容器的子元素，且  <code>z-index</code>  值不为  <code>auto</code>；</li><li><code>opacity</code>属性值小于  <code>1</code>  的元素；</li><li><code>mix-blend-mode</code>属性值不为  <code>normal</code>  的元素；</li><li>以下任意属性值不为  <code>none</code>  的元素： <ul><li><code>transform</code></li><li><code>filter</code></li><li><code>backdrop-filter</code></li><li><code>perspective</code></li><li><code>clip-path</code></li><li><code>mask</code> / <code>mask-image</code> / <code>mask-border</code></li></ul></li><li><code>isolation</code>属性值为  <code>isolate</code>  的元素；</li><li><code>will-change</code> 值设定了任一属性而该属性在 non-initial 值时会创建层叠上下文的元素；</li><li><code>contain</code>属性值为  <code>layout</code>、<code>paint</code>  或包含它们其中之一的合成值（比如  <code>contain: strict</code>、<code>contain: content</code>）的元素。</li></ul><p>在层叠上下文中，子元素同样也按照上面解释的规则进行层叠。重要的是，其子级层叠上下文的  <code>z-index</code>  值只在父级中才有意义。子级层叠上下文被自动视为父级层叠上下文的一个独立单元。</p><p>总结：</p><ul><li>层叠上下文可以包含在其他层叠上下文中，并且一起创建一个层叠上下文的层级。</li><li>每个层叠上下文都完全独立于它的兄弟元素：当处理层叠时只考虑子元素。</li><li>每个层叠上下文都是自包含的：当一个元素的内容发生层叠后，该元素将被作为整体在父级层叠上下文中按顺序进行层叠。</li></ul><p><strong>备注：</strong>  层叠上下文的层级是 HTML 元素层级的一个子级，因为只有某些元素才会创建层叠上下文。可以这样说，没有创建自己的层叠上下文的元素会被父层叠上下文<em>同化</em>。</p><p>例子代码，添加解释</p><h2 id="块格式化上下文" tabindex="-1">块格式化上下文 <a class="header-anchor" href="#块格式化上下文" aria-label="Permalink to &quot;块格式化上下文&quot;">​</a></h2><p><strong>块格式化上下文</strong>（Block Formatting Context，BFC）是 Web 页面的可视 CSS 渲染的一部分，是块级盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。</p><p>下列方式会创建块格式化上下文：</p><ul><li>根元素（<code>&lt;html&gt;</code>）</li><li>浮动元素（<code>float</code> 值不为  <code>none</code>）</li><li>绝对定位元素（<code>position</code> 值为  <code>absolute</code>  或  <code>fixed</code>）</li><li>行内块元素（<code>display</code> 值为  <code>inline-block</code>）</li><li>表格单元格（<code>display</code> 值为  <code>table-cell</code>，HTML 表格单元格默认值）</li><li>表格标题（<code>display</code> 值为  <code>table-caption</code>，HTML 表格标题默认值）</li><li>匿名表格单元格元素（<code>display</code>  值为  <code>table</code>、<code>table-row</code>、 <code>table-row-group</code>、<code>table-header-group</code>、<code>table-footer-group</code>（分别是 HTML table、tr、tbody、thead、tfoot 的默认值）或  <code>inline-table</code>）</li><li><code>overflow</code> 值不为  <code>visible</code>、<code>clip</code>  的块元素</li><li><code>display</code>  值为  <code>flow-root</code>  的元素</li><li><code>contain</code> 值为  <code>layout</code>、<code>content</code>  或  <code>paint</code>  的元素</li><li>弹性元素（<code>display</code>  值为  <code>flex</code>  或  <code>inline-flex</code>  元素的直接子元素），如果它们本身既不是  flex、grid 也不是  table 容器</li><li>网格元素（<code>display</code>  值为  <code>grid</code>  或  <code>inline-grid</code>  元素的直接子元素），如果它们本身既不是  flex、grid 也不是  table  容器</li><li>多列容器（<code>column-count</code>或  <code>column-width</code>值不为  <code>auto</code>，包括<code>column-count</code>  为  <code>1</code>）</li><li><code>column-span</code>  值为  <code>all</code>  的元素始终会创建一个新的 BFC，即使该元素没有包裹在一个多列容器中。</li></ul><p>格式化上下文影响布局，通常，我们会为定位和清除浮动创建新的 BFC，而不是更改布局，因为它将：</p><ul><li>包含内部浮动</li><li>排除外部浮动</li><li>阻止外边距重叠</li></ul><p><strong>备注：</strong> flex/grid 容器（display：flex/grid/inline-flex/inline-grid）建立新的 flex/grid 格式上下文，除布局之外，它与块格式上下文类似。flex/grid 容器中没有可用的浮动子级，但排除外部浮动和阻止外边距重叠仍然有效。</p><h2 id="示例" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context#%E7%A4%BA%E4%BE%8B" target="_blank" rel="noreferrer">示例</a> <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;[示例](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context#%E7%A4%BA%E4%BE%8B)&quot;">​</a></h2><p>例子也很重要，参考网站上的内容实现相应代码</p>`,61),p=[n];function c(t,i,r,d,F,D){return s(),o("div",null,p)}const g=l(a,[["render",c]]);export{C as __pageData,g as default};
