import{_ as n,C as l,c as p,H as e,k as s,a as o,Q as c,o as t}from"./chunks/framework.00751356.js";const F=JSON.parse('{"title":"flex","description":"","frontmatter":{},"headers":[],"relativePath":"basic/css/flex.md","filePath":"basic/css/flex.md"}'),r={name:"basic/css/flex.md"},i=s("h1",{id:"flex",tabindex:"-1"},[o("flex "),s("a",{class:"header-anchor",href:"#flex","aria-label":'Permalink to "flex"'},"​")],-1),y=c(`<h2 id="容器属性" tabindex="-1">容器属性 <a class="header-anchor" href="#容器属性" aria-label="Permalink to &quot;容器属性&quot;">​</a></h2><p>首先，实现 flex 布局需要先指定一个容器，任何一个容器都可以被指定为 flex 布局，这样容器内部的元素就可以使用 flex 来进行布局。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* 可以有两种取值 */</span></span>
<span class="line"><span style="color:#B392F0;">.container</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">display</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">flex</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">display</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">inline-flex</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* 可以有两种取值 */</span></span>
<span class="line"><span style="color:#6F42C1;">.container</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">display</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">flex</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">display</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">inline-flex</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>需要注意的是:当时设置 flex 布局之后,子元素的 float、clear、vertical-align 的属性将会失效.</p></blockquote><p>有下面六种属性可以设置在容器上,它们分别是:</p><p>1、flex-direction</p><p>2、flex-wrap</p><p>3、flex-flow</p><p>4、justify-content</p><p>5、align-items</p><p>6、align-content</p><h3 id="flex-direction" tabindex="-1">flex-direction <a class="header-anchor" href="#flex-direction" aria-label="Permalink to &quot;flex-direction&quot;">​</a></h3><blockquote><p>决定主轴的方向 (即项目的排列方向)</p></blockquote><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">row:             主轴为水平方向,起点在左端.默认值</span></span>
<span class="line"><span style="color:#6A737D;">row-reverse:     主轴为水平方向,起点在右端</span></span>
<span class="line"><span style="color:#6A737D;">column:          主轴为垂直方向,起点在上沿</span></span>
<span class="line"><span style="color:#6A737D;">column-reverse:  主轴为垂直方向,起点在下沿</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#B392F0;">.container</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">flex-direction</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">row</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">flex-direction</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">row-reverse</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">flex-direction</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">column</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">flex-direction</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">column-reverse</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">row:             主轴为水平方向,起点在左端.默认值</span></span>
<span class="line"><span style="color:#6A737D;">row-reverse:     主轴为水平方向,起点在右端</span></span>
<span class="line"><span style="color:#6A737D;">column:          主轴为垂直方向,起点在上沿</span></span>
<span class="line"><span style="color:#6A737D;">column-reverse:  主轴为垂直方向,起点在下沿</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#6F42C1;">.container</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">flex-direction</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">row</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">flex-direction</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">row-reverse</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">flex-direction</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">column</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">flex-direction</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">column-reverse</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="flex-wrap" tabindex="-1">flex-wrap <a class="header-anchor" href="#flex-wrap" aria-label="Permalink to &quot;flex-wrap&quot;">​</a></h3><blockquote><p>决定容器内项目是否可换行</p></blockquote><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">默认情况下,项目都排在主轴线上,使用 flex-wrap 可实现项目的换行.</span></span>
<span class="line"><span style="color:#6A737D;">nowrap:       不换行, 默认值</span></span>
<span class="line"><span style="color:#6A737D;">wrap:         项目主轴总尺寸超出容器时换行,第一行在上方</span></span>
<span class="line"><span style="color:#6A737D;">wrap-reverse: 换行,第一行在下方</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#B392F0;">.container</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">flex-wrap</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">nowrap</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">flex-wrap</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">wrap</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">flex-wrap</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">wrap-reverse</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">默认情况下,项目都排在主轴线上,使用 flex-wrap 可实现项目的换行.</span></span>
<span class="line"><span style="color:#6A737D;">nowrap:       不换行, 默认值</span></span>
<span class="line"><span style="color:#6A737D;">wrap:         项目主轴总尺寸超出容器时换行,第一行在上方</span></span>
<span class="line"><span style="color:#6A737D;">wrap-reverse: 换行,第一行在下方</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#6F42C1;">.container</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">flex-wrap</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">nowrap</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">flex-wrap</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">wrap</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">flex-wrap</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">wrap-reverse</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="flex-flow" tabindex="-1">flex-flow <a class="header-anchor" href="#flex-flow" aria-label="Permalink to &quot;flex-flow&quot;">​</a></h3><blockquote><p>flex-direction 和 flex-wrap 的简写形式</p></blockquote><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">默认值为: row nowrap(这里是分开的两个属性哦)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#B392F0;">.container</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">flex-flow</span><span style="color:#E1E4E8;">: &lt; flex-direction &gt; &lt; flex-wrap &gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">默认值为: row nowrap(这里是分开的两个属性哦)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6F42C1;">.container</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">flex-flow</span><span style="color:#24292E;">: &lt; flex-direction &gt; &lt; flex-wrap &gt;;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="justify-content" tabindex="-1">justify-content <a class="header-anchor" href="#justify-content" aria-label="Permalink to &quot;justify-content&quot;">​</a></h3><blockquote><p>定义了项目在主轴的对齐方式</p></blockquote><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">建立在主轴为水平方向时测试,即 flex-direction: row</span></span>
<span class="line"><span style="color:#6A737D;">flex-start      左对齐  默认值</span></span>
<span class="line"><span style="color:#6A737D;">flex-end        右对齐</span></span>
<span class="line"><span style="color:#6A737D;">center          居中</span></span>
<span class="line"><span style="color:#6A737D;">space-between   两端对齐,项目之间的间隔相等,即剩余空间等分成间隙.</span></span>
<span class="line"><span style="color:#6A737D;">space-around    每个项目两侧的间隔相等,所以项目之间的间隔比项目与边缘的间隔大一倍.</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#B392F0;">.container</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">justify-content</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">flex-start</span><span style="color:#E1E4E8;"> | </span><span style="color:#79B8FF;">flex-end</span><span style="color:#E1E4E8;"> | </span><span style="color:#79B8FF;">center</span><span style="color:#E1E4E8;"> | </span><span style="color:#79B8FF;">space-between</span><span style="color:#E1E4E8;"> | </span><span style="color:#79B8FF;">space-around</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">建立在主轴为水平方向时测试,即 flex-direction: row</span></span>
<span class="line"><span style="color:#6A737D;">flex-start      左对齐  默认值</span></span>
<span class="line"><span style="color:#6A737D;">flex-end        右对齐</span></span>
<span class="line"><span style="color:#6A737D;">center          居中</span></span>
<span class="line"><span style="color:#6A737D;">space-between   两端对齐,项目之间的间隔相等,即剩余空间等分成间隙.</span></span>
<span class="line"><span style="color:#6A737D;">space-around    每个项目两侧的间隔相等,所以项目之间的间隔比项目与边缘的间隔大一倍.</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#6F42C1;">.container</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">justify-content</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">flex-start</span><span style="color:#24292E;"> | </span><span style="color:#005CC5;">flex-end</span><span style="color:#24292E;"> | </span><span style="color:#005CC5;">center</span><span style="color:#24292E;"> | </span><span style="color:#005CC5;">space-between</span><span style="color:#24292E;"> | </span><span style="color:#005CC5;">space-around</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="align-items" tabindex="-1">align-items <a class="header-anchor" href="#align-items" aria-label="Permalink to &quot;align-items&quot;">​</a></h3><blockquote><p>定义了项目在交叉轴上的对齐方式</p></blockquote><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">建立在主轴为水平方向时测试,即 flex-direction: row</span></span>
<span class="line"><span style="color:#6A737D;">stretch:    如果项目未设置高度或者设为 auto,将占满整个容器的高度.默认值</span></span>
<span class="line"><span style="color:#6A737D;">flex-start: 交叉轴的起点对齐</span></span>
<span class="line"><span style="color:#6A737D;">flex-end:   交叉轴的终点对齐</span></span>
<span class="line"><span style="color:#6A737D;">center:     交叉轴的中点对齐</span></span>
<span class="line"><span style="color:#6A737D;">baseline:   项目的第一行文字的基线对齐</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#B392F0;">.container</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">align-items</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">flex-start</span><span style="color:#E1E4E8;"> | </span><span style="color:#79B8FF;">flex-end</span><span style="color:#E1E4E8;"> | </span><span style="color:#79B8FF;">center</span><span style="color:#E1E4E8;"> | </span><span style="color:#79B8FF;">baseline</span><span style="color:#E1E4E8;"> | </span><span style="color:#79B8FF;">stretch</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">建立在主轴为水平方向时测试,即 flex-direction: row</span></span>
<span class="line"><span style="color:#6A737D;">stretch:    如果项目未设置高度或者设为 auto,将占满整个容器的高度.默认值</span></span>
<span class="line"><span style="color:#6A737D;">flex-start: 交叉轴的起点对齐</span></span>
<span class="line"><span style="color:#6A737D;">flex-end:   交叉轴的终点对齐</span></span>
<span class="line"><span style="color:#6A737D;">center:     交叉轴的中点对齐</span></span>
<span class="line"><span style="color:#6A737D;">baseline:   项目的第一行文字的基线对齐</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#6F42C1;">.container</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">align-items</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">flex-start</span><span style="color:#24292E;"> | </span><span style="color:#005CC5;">flex-end</span><span style="color:#24292E;"> | </span><span style="color:#005CC5;">center</span><span style="color:#24292E;"> | </span><span style="color:#005CC5;">baseline</span><span style="color:#24292E;"> | </span><span style="color:#005CC5;">stretch</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="align-content" tabindex="-1">align-content <a class="header-anchor" href="#align-content" aria-label="Permalink to &quot;align-content&quot;">​</a></h3><blockquote><p>定义了多根轴线的对齐方式,如果项目只有一根轴线,那么该属性将不起作用</p></blockquote><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">.container</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">align-content</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">flex-start</span><span style="color:#E1E4E8;"> | </span><span style="color:#79B8FF;">flex-end</span><span style="color:#E1E4E8;"> | </span><span style="color:#79B8FF;">center</span><span style="color:#E1E4E8;"> | </span><span style="color:#79B8FF;">space-between</span><span style="color:#E1E4E8;"> | </span><span style="color:#79B8FF;">space-around</span><span style="color:#E1E4E8;"> | </span><span style="color:#79B8FF;">stretch</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">.container</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">align-content</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">flex-start</span><span style="color:#24292E;"> | </span><span style="color:#005CC5;">flex-end</span><span style="color:#24292E;"> | </span><span style="color:#005CC5;">center</span><span style="color:#24292E;"> | </span><span style="color:#005CC5;">space-between</span><span style="color:#24292E;"> | </span><span style="color:#005CC5;">space-around</span><span style="color:#24292E;"> | </span><span style="color:#005CC5;">stretch</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="子容器属性" tabindex="-1">子容器属性 <a class="header-anchor" href="#子容器属性" aria-label="Permalink to &quot;子容器属性&quot;">​</a></h2><p>上述讲的是一个容器可以设置的属性,下面讲的是容器内的子容器</p><p>1、order 属性: order 越小，越往前排</p><p>2、flex-grow 属性: 定义子元素或者子容器的放大比例,默认为 0,即如果存在剩余空间,也不放大.</p><p>3、flex-shrink 属性: 定义了项目的缩小比例,默认为 1,即如果空间不足,该项目将缩小.</p><p>4、flex-basis 属性: 定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 auto,即项目的本来大小。</p><p>5、align-self 属性: 当前子容器在交叉轴对齐方式</p><p>6、flex 属性：简写形式，由 <code>&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt; </code> 组成</p><h2 id="flex-简写" tabindex="-1">flex 简写 <a class="header-anchor" href="#flex-简写" aria-label="Permalink to &quot;flex 简写&quot;">​</a></h2><p>第一个数值是 flex-grow。赋值为正数的话是让元素增加所占空间。第二个数值是 flex-shrink 正数可以让它缩小所占空间，但是只有在 flex 元素总和超出主轴才会生效。最后一个数值是 flex-basis；flex 元素是在这个基准值的基础上缩放的。</p><p>flex 简写属性在下面有三个值的定义 默认值为 0 1 auto;</p><ul><li><p>flex-grow : 定义项目的放大比例,默认为 0</p></li><li><p>flex-shrink : 定义项目的缩小比例,默认为 1</p></li><li><p>flex-basis : 定义项目在分配多余的空间之前,项目占据的主轴空间。默认为 auto（item 本来大小）,如果设置为具体值，<strong>优先级大于元素本身设置的宽度</strong>。</p></li></ul><h3 id="flex-initial" tabindex="-1">flex: initial <a class="header-anchor" href="#flex-initial" aria-label="Permalink to &quot;flex: initial&quot;">​</a></h3><p>flex: initial 是把 flex 元素重置为 Flexbox 的初始值，它相当于 flex: 0 1 auto。</p><p>在这里 flex-grow 的值为 0，所以 flex 元素不会超过它们 flex-basis 的尺寸。flex-shrink 的值为 1, 所以可以缩小 flex 元素来防止它们溢出。flex-basis 的值为 auto. flex 元素尺寸可以是在主维度上设置的，也可以是根据内容自动得到的。</p><h3 id="flex-positive-number" tabindex="-1">flex:&lt;positive-number&gt; <a class="header-anchor" href="#flex-positive-number" aria-label="Permalink to &quot;flex:\\&lt;positive-number&gt;&quot;">​</a></h3><p>完整形式:</p><p><code>flex:1</code> 相当于 <code>flex: positive-number 1 0;</code></p><p>flex:1 在父元素尺寸不足的时候,会优先最小化内容尺寸.</p><p>使用场景:当我们希望元素可以充分的利用剩余的空间,同时不会很多的占用其他同级元素的空间的时候使用.</p><p>flex:0 通常表现为内容最小化宽度</p><p>使用场景:当希望元素 item 占用最小化的内容宽度的时候</p><h3 id="flex-auto" tabindex="-1">flex:auto <a class="header-anchor" href="#flex-auto" aria-label="Permalink to &quot;flex:auto&quot;">​</a></h3><p>flex: auto 等同于 flex: 1 1 auto，flex 元素在需要的时候既可以拉伸也可以收缩。</p><p>flex:auto 在父元素尺寸不足的时候,会优先最大化内容尺寸.</p><p>使用场景:当我们希望元素充分的使用剩余的空间,各自元素按照各自内容进行分配的时候使用.</p><h3 id="flex-none" tabindex="-1">flex: none <a class="header-anchor" href="#flex-none" aria-label="Permalink to &quot;flex: none&quot;">​</a></h3><p>flex: none 可以把 flex 元素设置为不可伸缩。它和设置为 flex: 0 0 auto 是一样的。</p><p>元素既不能拉伸或者收缩，但是元素会按具有 flex-basis: auto 属性的 flexbox 进行布局。</p>`,58);function E(d,f,x,h,u,C){const a=l("flex-visual");return t(),p("div",null,[i,e(a),y])}const g=n(r,[["render",E]]);export{F as __pageData,g as default};
